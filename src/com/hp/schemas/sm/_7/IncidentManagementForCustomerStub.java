/**
 * IncidentManagementForCustomerStub.java
 *
 * This file was auto-generated from WSDL
 * by the Apache Axis2 version: 1.7.7  Built on : Nov 20, 2017 (11:41:20 GMT)
 */
package com.hp.schemas.sm._7;


/*
 *  IncidentManagementForCustomerStub java implementation
 */
public class IncidentManagementForCustomerStub extends org.apache.axis2.client.Stub {
    private static int counter = 0;
    protected org.apache.axis2.description.AxisOperation[] _operations;

    //hashmaps to keep the fault mapping
    private java.util.HashMap faultExceptionNameMap = new java.util.HashMap();
    private java.util.HashMap faultExceptionClassNameMap = new java.util.HashMap();
    private java.util.HashMap faultMessageMap = new java.util.HashMap();
    private javax.xml.namespace.QName[] opNameArray = null;

    /**
     *Constructor that takes in a configContext
     */
    public IncidentManagementForCustomerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint) throws org.apache.axis2.AxisFault {
        this(configurationContext, targetEndpoint, false);
    }

    /**
     * Constructor that takes in a configContext  and useseperate listner
     */
    public IncidentManagementForCustomerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext,
        java.lang.String targetEndpoint, boolean useSeparateListener)
        throws org.apache.axis2.AxisFault {
        //To populate AxisService
        populateAxisService();
        populateFaults();

        _serviceClient = new org.apache.axis2.client.ServiceClient(configurationContext,
                _service);

        _serviceClient.getOptions()
                      .setTo(new org.apache.axis2.addressing.EndpointReference(
                targetEndpoint));
        _serviceClient.getOptions().setUseSeparateListener(useSeparateListener);
    }

    /**
     * Default Constructor
     */
    public IncidentManagementForCustomerStub(
        org.apache.axis2.context.ConfigurationContext configurationContext)
        throws org.apache.axis2.AxisFault {
        this(configurationContext, "http://ServiceMgr01:13080/SM/7/ws");
    }

    /**
     * Default Constructor
     */
    public IncidentManagementForCustomerStub()
        throws org.apache.axis2.AxisFault {
        this("http://ServiceMgr01:13080/SM/7/ws");
    }

    /**
     * Constructor taking the target endpoint
     */
    public IncidentManagementForCustomerStub(java.lang.String targetEndpoint)
        throws org.apache.axis2.AxisFault {
        this(null, targetEndpoint);
    }

    private static synchronized java.lang.String getUniqueSuffix() {
        // reset the counter if it is greater than 99999
        if (counter > 99999) {
            counter = 0;
        }

        counter = counter + 1;

        return java.lang.Long.toString(java.lang.System.currentTimeMillis()) +
        "_" + counter;
    }

    private void populateAxisService() throws org.apache.axis2.AxisFault {
        //creating the Service with a unique name
        _service = new org.apache.axis2.description.AxisService(
                "IncidentManagementForCustomer" + getUniqueSuffix());
        addAnonymousOperations();

        //creating the operations
        org.apache.axis2.description.AxisOperation __operation;

        _operations = new org.apache.axis2.description.AxisOperation[7];

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "createIncidentManagementForCustomer"));
        _service.addOperation(__operation);

        _operations[0] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "closeIncidentManagementForCustomer"));
        _service.addOperation(__operation);

        _operations[1] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "resolveIncidentManagementForCustomer"));
        _service.addOperation(__operation);

        _operations[2] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "retrieveIncidentManagementForCustomerKeysList"));
        _service.addOperation(__operation);

        _operations[3] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "updateIncidentManagementForCustomer"));
        _service.addOperation(__operation);

        _operations[4] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "retrieveIncidentManagementForCustomer"));
        _service.addOperation(__operation);

        _operations[5] = __operation;

        __operation = new org.apache.axis2.description.OutInAxisOperation();

        __operation.setName(new javax.xml.namespace.QName(
                "http://schemas.hp.com/SM/7",
                "retrieveIncidentManagementForCustomerList"));
        _service.addOperation(__operation);

        _operations[6] = __operation;
    }

    //populates the faults
    private void populateFaults() {
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#createIncidentManagementForCustomer
     * @param createIncidentManagementForCustomerRequest0
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse createIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest createIncidentManagementForCustomerRequest0)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
            _operationClient.getOptions().setAction("Create");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    createIncidentManagementForCustomerRequest0,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "createIncidentManagementForCustomer")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "CreateIncidentManagementForCustomerRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "CreateIncidentManagementForCustomer"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "CreateIncidentManagementForCustomer"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "CreateIncidentManagementForCustomer"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startcreateIncidentManagementForCustomer
     * @param createIncidentManagementForCustomerRequest0
     */
    public void startcreateIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest createIncidentManagementForCustomerRequest0,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[0].getName());
        _operationClient.getOptions().setAction("Create");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                createIncidentManagementForCustomerRequest0,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "createIncidentManagementForCustomer")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "CreateIncidentManagementForCustomerRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse.class);
                        callback.receiveResultcreateIncidentManagementForCustomer((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorcreateIncidentManagementForCustomer(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "CreateIncidentManagementForCustomer"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "CreateIncidentManagementForCustomer"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "CreateIncidentManagementForCustomer"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorcreateIncidentManagementForCustomer(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcreateIncidentManagementForCustomer(f);
                                }
                            } else {
                                callback.receiveErrorcreateIncidentManagementForCustomer(f);
                            }
                        } else {
                            callback.receiveErrorcreateIncidentManagementForCustomer(f);
                        }
                    } else {
                        callback.receiveErrorcreateIncidentManagementForCustomer(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorcreateIncidentManagementForCustomer(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[0].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[0].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#closeIncidentManagementForCustomer
     * @param closeIncidentManagementForCustomerRequest2
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse closeIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest closeIncidentManagementForCustomerRequest2)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
            _operationClient.getOptions().setAction("Close");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    closeIncidentManagementForCustomerRequest2,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "closeIncidentManagementForCustomer")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "CloseIncidentManagementForCustomerRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "CloseIncidentManagementForCustomer"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "CloseIncidentManagementForCustomer"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "CloseIncidentManagementForCustomer"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startcloseIncidentManagementForCustomer
     * @param closeIncidentManagementForCustomerRequest2
     */
    public void startcloseIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest closeIncidentManagementForCustomerRequest2,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[1].getName());
        _operationClient.getOptions().setAction("Close");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                closeIncidentManagementForCustomerRequest2,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "closeIncidentManagementForCustomer")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "CloseIncidentManagementForCustomerRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse.class);
                        callback.receiveResultcloseIncidentManagementForCustomer((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorcloseIncidentManagementForCustomer(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "CloseIncidentManagementForCustomer"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "CloseIncidentManagementForCustomer"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "CloseIncidentManagementForCustomer"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorcloseIncidentManagementForCustomer(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorcloseIncidentManagementForCustomer(f);
                                }
                            } else {
                                callback.receiveErrorcloseIncidentManagementForCustomer(f);
                            }
                        } else {
                            callback.receiveErrorcloseIncidentManagementForCustomer(f);
                        }
                    } else {
                        callback.receiveErrorcloseIncidentManagementForCustomer(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorcloseIncidentManagementForCustomer(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[1].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[1].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#resolveIncidentManagementForCustomer
     * @param resolveIncidentManagementForCustomerRequest4
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse resolveIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest resolveIncidentManagementForCustomerRequest4)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
            _operationClient.getOptions().setAction("Resolve");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    resolveIncidentManagementForCustomerRequest4,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "resolveIncidentManagementForCustomer")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "ResolveIncidentManagementForCustomerRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "ResolveIncidentManagementForCustomer"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "ResolveIncidentManagementForCustomer"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "ResolveIncidentManagementForCustomer"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startresolveIncidentManagementForCustomer
     * @param resolveIncidentManagementForCustomerRequest4
     */
    public void startresolveIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest resolveIncidentManagementForCustomerRequest4,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[2].getName());
        _operationClient.getOptions().setAction("Resolve");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                resolveIncidentManagementForCustomerRequest4,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "resolveIncidentManagementForCustomer")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "ResolveIncidentManagementForCustomerRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse.class);
                        callback.receiveResultresolveIncidentManagementForCustomer((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorresolveIncidentManagementForCustomer(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "ResolveIncidentManagementForCustomer"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "ResolveIncidentManagementForCustomer"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "ResolveIncidentManagementForCustomer"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorresolveIncidentManagementForCustomer(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorresolveIncidentManagementForCustomer(f);
                                }
                            } else {
                                callback.receiveErrorresolveIncidentManagementForCustomer(f);
                            }
                        } else {
                            callback.receiveErrorresolveIncidentManagementForCustomer(f);
                        }
                    } else {
                        callback.receiveErrorresolveIncidentManagementForCustomer(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorresolveIncidentManagementForCustomer(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[2].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[2].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#retrieveIncidentManagementForCustomerKeysList
     * @param retrieveIncidentManagementForCustomerKeysListRequest6
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse retrieveIncidentManagementForCustomerKeysList(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest retrieveIncidentManagementForCustomerKeysListRequest6)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
            _operationClient.getOptions().setAction("RetrieveKeysList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    retrieveIncidentManagementForCustomerKeysListRequest6,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "retrieveIncidentManagementForCustomerKeysList")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "RetrieveIncidentManagementForCustomerKeysListRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "RetrieveIncidentManagementForCustomerKeysList"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomerKeysList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomerKeysList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startretrieveIncidentManagementForCustomerKeysList
     * @param retrieveIncidentManagementForCustomerKeysListRequest6
     */
    public void startretrieveIncidentManagementForCustomerKeysList(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest retrieveIncidentManagementForCustomerKeysListRequest6,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[3].getName());
        _operationClient.getOptions().setAction("RetrieveKeysList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                retrieveIncidentManagementForCustomerKeysListRequest6,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "retrieveIncidentManagementForCustomerKeysList")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "RetrieveIncidentManagementForCustomerKeysListRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse.class);
                        callback.receiveResultretrieveIncidentManagementForCustomerKeysList((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "RetrieveIncidentManagementForCustomerKeysList"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomerKeysList"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomerKeysList"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                                }
                            } else {
                                callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                            }
                        } else {
                            callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(f);
                        }
                    } else {
                        callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorretrieveIncidentManagementForCustomerKeysList(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[3].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[3].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#updateIncidentManagementForCustomer
     * @param updateIncidentManagementForCustomerRequest8
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse updateIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest updateIncidentManagementForCustomerRequest8)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
            _operationClient.getOptions().setAction("Update");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    updateIncidentManagementForCustomerRequest8,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "updateIncidentManagementForCustomer")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "UpdateIncidentManagementForCustomerRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "UpdateIncidentManagementForCustomer"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "UpdateIncidentManagementForCustomer"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "UpdateIncidentManagementForCustomer"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startupdateIncidentManagementForCustomer
     * @param updateIncidentManagementForCustomerRequest8
     */
    public void startupdateIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest updateIncidentManagementForCustomerRequest8,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[4].getName());
        _operationClient.getOptions().setAction("Update");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                updateIncidentManagementForCustomerRequest8,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "updateIncidentManagementForCustomer")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "UpdateIncidentManagementForCustomerRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse.class);
                        callback.receiveResultupdateIncidentManagementForCustomer((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorupdateIncidentManagementForCustomer(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "UpdateIncidentManagementForCustomer"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "UpdateIncidentManagementForCustomer"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "UpdateIncidentManagementForCustomer"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorupdateIncidentManagementForCustomer(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorupdateIncidentManagementForCustomer(f);
                                }
                            } else {
                                callback.receiveErrorupdateIncidentManagementForCustomer(f);
                            }
                        } else {
                            callback.receiveErrorupdateIncidentManagementForCustomer(f);
                        }
                    } else {
                        callback.receiveErrorupdateIncidentManagementForCustomer(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorupdateIncidentManagementForCustomer(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[4].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[4].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#retrieveIncidentManagementForCustomer
     * @param retrieveIncidentManagementForCustomerRequest10
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse retrieveIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest retrieveIncidentManagementForCustomerRequest10)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
            _operationClient.getOptions().setAction("Retrieve");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    retrieveIncidentManagementForCustomerRequest10,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "retrieveIncidentManagementForCustomer")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "RetrieveIncidentManagementForCustomerRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "RetrieveIncidentManagementForCustomer"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomer"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomer"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startretrieveIncidentManagementForCustomer
     * @param retrieveIncidentManagementForCustomerRequest10
     */
    public void startretrieveIncidentManagementForCustomer(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest retrieveIncidentManagementForCustomerRequest10,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[5].getName());
        _operationClient.getOptions().setAction("Retrieve");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                retrieveIncidentManagementForCustomerRequest10,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "retrieveIncidentManagementForCustomer")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "RetrieveIncidentManagementForCustomerRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse.class);
                        callback.receiveResultretrieveIncidentManagementForCustomer((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorretrieveIncidentManagementForCustomer(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "RetrieveIncidentManagementForCustomer"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomer"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomer"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorretrieveIncidentManagementForCustomer(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                                }
                            } else {
                                callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                            }
                        } else {
                            callback.receiveErrorretrieveIncidentManagementForCustomer(f);
                        }
                    } else {
                        callback.receiveErrorretrieveIncidentManagementForCustomer(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorretrieveIncidentManagementForCustomer(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[5].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[5].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    /**
     * Auto generated method signature
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#retrieveIncidentManagementForCustomerList
     * @param retrieveIncidentManagementForCustomerListRequest12
     */
    public com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse retrieveIncidentManagementForCustomerList(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest retrieveIncidentManagementForCustomerListRequest12)
        throws java.rmi.RemoteException {
        org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        try {
            org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
            _operationClient.getOptions().setAction("RetrieveList");
            _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

            addPropertyToOperationClient(_operationClient,
                org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
                "&");

            // create SOAP envelope with that payload
            org.apache.axiom.soap.SOAPEnvelope env = null;

            env = toEnvelope(getFactory(_operationClient.getOptions()
                                                        .getSoapVersionURI()),
                    retrieveIncidentManagementForCustomerListRequest12,
                    optimizeContent(
                        new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7",
                            "retrieveIncidentManagementForCustomerList")),
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "RetrieveIncidentManagementForCustomerListRequest"));

            //adding SOAP soap_headers
            _serviceClient.addHeadersToEnvelope(env);
            // set the message context with that soap envelope
            _messageContext.setEnvelope(env);

            // add the message contxt to the operation client
            _operationClient.addMessageContext(_messageContext);

            //execute the operation client
            _operationClient.execute(true);

            org.apache.axis2.context.MessageContext _returnMessageContext = _operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);
            org.apache.axiom.soap.SOAPEnvelope _returnEnv = _returnMessageContext.getEnvelope();

            java.lang.Object object = fromOM(_returnEnv.getBody()
                                                       .getFirstElement(),
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse.class);

            return (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse) object;
        } catch (org.apache.axis2.AxisFault f) {
            org.apache.axiom.om.OMElement faultElt = f.getDetail();

            if (faultElt != null) {
                if (faultExceptionNameMap.containsKey(
                            new org.apache.axis2.client.FaultMapKey(
                                faultElt.getQName(),
                                "RetrieveIncidentManagementForCustomerList"))) {
                    //make the fault by reflection
                    try {
                        java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomerList"));
                        java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                        java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                        java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                        //message class
                        java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                    faultElt.getQName(),
                                    "RetrieveIncidentManagementForCustomerList"));
                        java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                        java.lang.Object messageObject = fromOM(faultElt,
                                messageClass);
                        java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                new java.lang.Class[] { messageClass });
                        m.invoke(ex, new java.lang.Object[] { messageObject });

                        throw new java.rmi.RemoteException(ex.getMessage(), ex);
                    } catch (java.lang.ClassCastException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.ClassNotFoundException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.NoSuchMethodException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.reflect.InvocationTargetException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.IllegalAccessException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    } catch (java.lang.InstantiationException e) {
                        // we cannot intantiate the class - throw the original Axis fault
                        throw f;
                    }
                } else {
                    throw f;
                }
            } else {
                throw f;
            }
        } finally {
            if (_messageContext.getTransportOut() != null) {
                _messageContext.getTransportOut().getSender()
                               .cleanup(_messageContext);
            }
        }
    }

    /**
     * Auto generated method signature for Asynchronous Invocations
     *
     * @see com.hp.schemas.sm._7.IncidentManagementForCustomer#startretrieveIncidentManagementForCustomerList
     * @param retrieveIncidentManagementForCustomerListRequest12
     */
    public void startretrieveIncidentManagementForCustomerList(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest retrieveIncidentManagementForCustomerListRequest12,
        final com.hp.schemas.sm._7.IncidentManagementForCustomerCallbackHandler callback)
        throws java.rmi.RemoteException {
        org.apache.axis2.client.OperationClient _operationClient = _serviceClient.createClient(_operations[6].getName());
        _operationClient.getOptions().setAction("RetrieveList");
        _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);

        addPropertyToOperationClient(_operationClient,
            org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,
            "&");

        // create SOAP envelope with that payload
        org.apache.axiom.soap.SOAPEnvelope env = null;
        final org.apache.axis2.context.MessageContext _messageContext = new org.apache.axis2.context.MessageContext();

        //Style is Doc.
        env = toEnvelope(getFactory(_operationClient.getOptions()
                                                    .getSoapVersionURI()),
                retrieveIncidentManagementForCustomerListRequest12,
                optimizeContent(
                    new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7",
                        "retrieveIncidentManagementForCustomerList")),
                new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                    "RetrieveIncidentManagementForCustomerListRequest"));

        // adding SOAP soap_headers
        _serviceClient.addHeadersToEnvelope(env);
        // create message context with that soap envelope
        _messageContext.setEnvelope(env);

        // add the message context to the operation client
        _operationClient.addMessageContext(_messageContext);

        _operationClient.setCallback(new org.apache.axis2.client.async.AxisCallback() {
                public void onMessage(
                    org.apache.axis2.context.MessageContext resultContext) {
                    try {
                        org.apache.axiom.soap.SOAPEnvelope resultEnv = resultContext.getEnvelope();

                        java.lang.Object object = fromOM(resultEnv.getBody()
                                                                  .getFirstElement(),
                                com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse.class);
                        callback.receiveResultretrieveIncidentManagementForCustomerList((com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse) object);
                    } catch (org.apache.axis2.AxisFault e) {
                        callback.receiveErrorretrieveIncidentManagementForCustomerList(e);
                    }
                }

                public void onError(java.lang.Exception error) {
                    if (error instanceof org.apache.axis2.AxisFault) {
                        org.apache.axis2.AxisFault f = (org.apache.axis2.AxisFault) error;
                        org.apache.axiom.om.OMElement faultElt = f.getDetail();

                        if (faultElt != null) {
                            if (faultExceptionNameMap.containsKey(
                                        new org.apache.axis2.client.FaultMapKey(
                                            faultElt.getQName(),
                                            "RetrieveIncidentManagementForCustomerList"))) {
                                //make the fault by reflection
                                try {
                                    java.lang.String exceptionClassName = (java.lang.String) faultExceptionClassNameMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomerList"));
                                    java.lang.Class exceptionClass = java.lang.Class.forName(exceptionClassName);
                                    java.lang.reflect.Constructor constructor = exceptionClass.getConstructor(java.lang.String.class);
                                    java.lang.Exception ex = (java.lang.Exception) constructor.newInstance(f.getMessage());

                                    //message class
                                    java.lang.String messageClassName = (java.lang.String) faultMessageMap.get(new org.apache.axis2.client.FaultMapKey(
                                                faultElt.getQName(),
                                                "RetrieveIncidentManagementForCustomerList"));
                                    java.lang.Class messageClass = java.lang.Class.forName(messageClassName);
                                    java.lang.Object messageObject = fromOM(faultElt,
                                            messageClass);
                                    java.lang.reflect.Method m = exceptionClass.getMethod("setFaultMessage",
                                            new java.lang.Class[] { messageClass });
                                    m.invoke(ex,
                                        new java.lang.Object[] { messageObject });

                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(new java.rmi.RemoteException(
                                            ex.getMessage(), ex));
                                } catch (java.lang.ClassCastException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (java.lang.ClassNotFoundException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (java.lang.NoSuchMethodException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (java.lang.reflect.InvocationTargetException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (java.lang.IllegalAccessException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (java.lang.InstantiationException e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                } catch (org.apache.axis2.AxisFault e) {
                                    // we cannot intantiate the class - throw the original Axis fault
                                    callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                                }
                            } else {
                                callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                            }
                        } else {
                            callback.receiveErrorretrieveIncidentManagementForCustomerList(f);
                        }
                    } else {
                        callback.receiveErrorretrieveIncidentManagementForCustomerList(error);
                    }
                }

                public void onFault(
                    org.apache.axis2.context.MessageContext faultContext) {
                    org.apache.axis2.AxisFault fault = org.apache.axis2.util.Utils.getInboundFaultFromMessageContext(faultContext);
                    onError(fault);
                }

                public void onComplete() {
                    try {
                        _messageContext.getTransportOut().getSender()
                                       .cleanup(_messageContext);
                    } catch (org.apache.axis2.AxisFault axisFault) {
                        callback.receiveErrorretrieveIncidentManagementForCustomerList(axisFault);
                    }
                }
            });

        org.apache.axis2.util.CallbackReceiver _callbackReceiver = null;

        if ((_operations[6].getMessageReceiver() == null) &&
                _operationClient.getOptions().isUseSeparateListener()) {
            _callbackReceiver = new org.apache.axis2.util.CallbackReceiver();
            _operations[6].setMessageReceiver(_callbackReceiver);
        }

        //execute the operation client
        _operationClient.execute(false);
    }

    private boolean optimizeContent(javax.xml.namespace.QName opName) {
        if (opNameArray == null) {
            return false;
        }

        for (int i = 0; i < opNameArray.length; i++) {
            if (opName.equals(opNameArray[i])) {
                return true;
            }
        }

        return false;
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.om.OMElement toOM(
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse param,
        boolean optimizeContent) throws org.apache.axis2.AxisFault {
        try {
            return param.getOMElement(com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse.MY_QNAME,
                org.apache.axiom.om.OMAbstractFactory.getOMFactory());
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory,
        com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest param,
        boolean optimizeContent, javax.xml.namespace.QName elementQName)
        throws org.apache.axis2.AxisFault {
        try {
            org.apache.axiom.soap.SOAPEnvelope emptyEnvelope = factory.getDefaultEnvelope();
            emptyEnvelope.getBody()
                         .addChild(param.getOMElement(
                    com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest.MY_QNAME,
                    factory));

            return emptyEnvelope;
        } catch (org.apache.axis2.databinding.ADBException e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }
    }

    /* methods to provide back word compatibility */

    /**
     *  get the default envelope
     */
    private org.apache.axiom.soap.SOAPEnvelope toEnvelope(
        org.apache.axiom.soap.SOAPFactory factory) {
        return factory.getDefaultEnvelope();
    }

    private java.lang.Object fromOM(org.apache.axiom.om.OMElement param,
        java.lang.Class type) throws org.apache.axis2.AxisFault {
        try {
            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CloseIncidentManagementForCustomerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.CreateIncidentManagementForCustomerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.ResolveIncidentManagementForCustomerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerKeysListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerListResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.RetrieveIncidentManagementForCustomerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerRequest.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }

            if (com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse.class.equals(
                        type)) {
                return com.hp.schemas.sm._7.IncidentManagementForCustomerStub.UpdateIncidentManagementForCustomerResponse.Factory.parse(param.getXMLStreamReaderWithoutCaching());
            }
        } catch (java.lang.Exception e) {
            throw org.apache.axis2.AxisFault.makeFault(e);
        }

        return null;
    }

    //http://ServiceMgr01:13080/SM/7/ws
    public static class Solution_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Solution_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for Solution
         * This was an Array!
         */
        protected StringType[] localSolution;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSolutionTracker = false;

        public boolean isSolutionSpecified() {
            return localSolutionTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getSolution() {
            return localSolution;
        }

        /**
         * validate the array for Solution
         */
        protected void validateSolution(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Solution
         */
        public void setSolution(StringType[] param) {
            validateSolution(param);

            localSolutionTracker = param != null;

            this.localSolution = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addSolution(StringType param) {
            if (localSolution == null) {
                localSolution = new StringType[] {  };
            }

            //update the setting tracker
            localSolutionTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localSolution);
            list.add(param);
            this.localSolution = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":Solution_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "Solution_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localSolutionTracker) {
                if (localSolution != null) {
                    for (int i = 0; i < localSolution.length; i++) {
                        if (localSolution[i] != null) {
                            localSolution[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7", "Solution"),
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Solution cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Solution_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Solution_type0 object = new Solution_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Solution_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Solution_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Solution").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "Solution").equals(reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setSolution((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DecimalType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DecimalType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Decimal
         */
        protected java.math.BigDecimal localDecimal;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Decimal");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getDecimal() {
            return localDecimal;
        }

        /**
         * Auto generated setter method
         * @param param Decimal
         */
        public void setDecimal(java.math.BigDecimal param) {
            this.localDecimal = param;
        }

        public java.lang.String toString() {
            return localDecimal.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DecimalType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DecimalType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localDecimal == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "decimal cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDecimal));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DecimalType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                DecimalType returnValue = new DecimalType();

                returnValue.setDecimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                        value));

                return returnValue;
            }

            public static DecimalType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DecimalType.Factory.fromString(content, namespaceUri);
                } else {
                    return DecimalType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DecimalType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DecimalType object = new DecimalType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DecimalType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DecimalType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "decimal" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDecimal(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateIncidentManagementForCustomerRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "CreateIncidentManagementForCustomerRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updateconstraint
         * This was an Attribute!
         */
        protected long localUpdateconstraint = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                "-1");

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdateconstraint() {
            return localUpdateconstraint;
        }

        /**
         * Auto generated setter method
         * @param param Updateconstraint
         */
        public void setUpdateconstraint(long param) {
            this.localUpdateconstraint = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":CreateIncidentManagementForCustomerRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CreateIncidentManagementForCustomerRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (localUpdateconstraint != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updateconstraint",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdateconstraint), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateIncidentManagementForCustomerRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateIncidentManagementForCustomerRequest object = new CreateIncidentManagementForCustomerRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreateIncidentManagementForCustomerRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreateIncidentManagementForCustomerRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updateconstraint"
                    java.lang.String tempAttribUpdateconstraint = reader.getAttributeValue(null,
                            "updateconstraint");

                    if (tempAttribUpdateconstraint != null) {
                        java.lang.String content = tempAttribUpdateconstraint;

                        object.setUpdateconstraint(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdateconstraint));
                    } else {
                        object.setUpdateconstraint(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updateconstraint");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DateTimeType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DateTimeType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for DateTime
         */
        protected java.util.Calendar localDateTime;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "DateTime");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return java.util.Calendar
         */
        public java.util.Calendar getDateTime() {
            return localDateTime;
        }

        /**
         * Auto generated setter method
         * @param param DateTime
         */
        public void setDateTime(java.util.Calendar param) {
            this.localDateTime = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDateTime);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DateTimeType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DateTimeType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localDateTime == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "dateTime cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDateTime));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DateTimeType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                DateTimeType returnValue = new DateTimeType();

                returnValue.setDateTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                        value));

                return returnValue;
            }

            public static DateTimeType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DateTimeType.Factory.fromString(content, namespaceUri);
                } else {
                    return DateTimeType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DateTimeType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DateTimeType object = new DateTimeType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DateTimeType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DateTimeType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "dateTime" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDateTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToDateTime(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updatecounter
         * This was an Attribute!
         */
        protected boolean localUpdatecounter;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getUpdatecounter() {
            return localUpdatecounter;
        }

        /**
         * Auto generated setter method
         * @param param Updatecounter
         */
        public void setUpdatecounter(boolean param) {
            this.localUpdatecounter = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (true) {
                writeAttribute("", "updatecounter",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdatecounter), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerRequest object = new RetrieveIncidentManagementForCustomerRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updatecounter"
                    java.lang.String tempAttribUpdatecounter = reader.getAttributeValue(null,
                            "updatecounter");

                    if (tempAttribUpdatecounter != null) {
                        java.lang.String content = tempAttribUpdatecounter;

                        object.setUpdatecounter(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribUpdatecounter));
                    } else {
                    }

                    handledAttributes.add("updatecounter");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CloseIncidentManagementForCustomerRequest implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "CloseIncidentManagementForCustomerRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updateconstraint
         * This was an Attribute!
         */
        protected long localUpdateconstraint = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                "-1");

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdateconstraint() {
            return localUpdateconstraint;
        }

        /**
         * Auto generated setter method
         * @param param Updateconstraint
         */
        public void setUpdateconstraint(long param) {
            this.localUpdateconstraint = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":CloseIncidentManagementForCustomerRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CloseIncidentManagementForCustomerRequest", xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (localUpdateconstraint != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updateconstraint",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdateconstraint), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CloseIncidentManagementForCustomerRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CloseIncidentManagementForCustomerRequest object = new CloseIncidentManagementForCustomerRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CloseIncidentManagementForCustomerRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CloseIncidentManagementForCustomerRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updateconstraint"
                    java.lang.String tempAttribUpdateconstraint = reader.getAttributeValue(null,
                            "updateconstraint");

                    if (tempAttribUpdateconstraint != null) {
                        java.lang.String content = tempAttribUpdateconstraint;

                        object.setUpdateconstraint(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdateconstraint));
                    } else {
                        object.setUpdateconstraint(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updateconstraint");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Explanation_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = explanation_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for Explanation
         * This was an Array!
         */
        protected StringType[] localExplanation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExplanationTracker = false;

        public boolean isExplanationSpecified() {
            return localExplanationTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getExplanation() {
            return localExplanation;
        }

        /**
         * validate the array for Explanation
         */
        protected void validateExplanation(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Explanation
         */
        public void setExplanation(StringType[] param) {
            validateExplanation(param);

            localExplanationTracker = param != null;

            this.localExplanation = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addExplanation(StringType param) {
            if (localExplanation == null) {
                localExplanation = new StringType[] {  };
            }

            //update the setting tracker
            localExplanationTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localExplanation);
            list.add(param);
            this.localExplanation = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":explanation_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "explanation_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localExplanationTracker) {
                if (localExplanation != null) {
                    for (int i = 0; i < localExplanation.length; i++) {
                        if (localExplanation[i] != null) {
                            localExplanation[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7", "explanation"),
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "explanation cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Explanation_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Explanation_type0 object = new Explanation_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"explanation_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Explanation_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "explanation").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "explanation").equals(
                                            reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setExplanation((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DoubleType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DoubleType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _double
         */
        protected double local_double;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Double");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return double
         */
        public double get_double() {
            return local_double;
        }

        /**
         * Auto generated setter method
         * @param param _double
         */
        public void set_double(double param) {
            this.local_double = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_double);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DoubleType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DoubleType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (java.lang.Double.isNaN(local_double)) {
                throw new org.apache.axis2.databinding.ADBException(
                    "double cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_double));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DoubleType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                DoubleType returnValue = new DoubleType();

                returnValue.set_double(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                        value));

                return returnValue;
            }

            public static DoubleType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DoubleType.Factory.fromString(content, namespaceUri);
                } else {
                    return DoubleType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DoubleType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DoubleType object = new DoubleType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DoubleType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DoubleType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "double" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_double(org.apache.axis2.databinding.utils.ConverterUtil.convertToDouble(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class StatusType implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7/Common",
                "StatusType", "ns2");
        private static java.util.HashMap _table_ = new java.util.HashMap();
        public static final java.lang.String _SUCCESS = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "SUCCESS");
        public static final java.lang.String _FAILURE = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "FAILURE");
        public static final StatusType SUCCESS = new StatusType(_SUCCESS, true);
        public static final StatusType FAILURE = new StatusType(_FAILURE, true);

        /**
         * field for StatusType
         */
        protected java.lang.String localStatusType;

        // Constructor
        protected StatusType(java.lang.String value, boolean isRegisterValue) {
            localStatusType = value;

            if (isRegisterValue) {
                _table_.put(localStatusType, this);
            }
        }

        public java.lang.String getValue() {
            return localStatusType;
        }

        public boolean equals(java.lang.Object obj) {
            return (obj == this);
        }

        public int hashCode() {
            return toString().hashCode();
        }

        public java.lang.String toString() {
            return localStatusType.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":StatusType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "StatusType", xmlWriter);
                }
            }

            if (localStatusType == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "StatusType cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localStatusType);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static StatusType fromValue(java.lang.String value)
                throws java.lang.IllegalArgumentException {
                StatusType enumeration = (StatusType) _table_.get(value);

                // handle unexpected enumeration values properly
                if (enumeration == null) {
                    throw new java.lang.IllegalArgumentException();
                }

                return enumeration;
            }

            public static StatusType fromString(java.lang.String value,
                java.lang.String namespaceURI)
                throws java.lang.IllegalArgumentException {
                try {
                    return fromValue(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            value));
                } catch (java.lang.Exception e) {
                    throw new java.lang.IllegalArgumentException();
                }
            }

            public static StatusType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return StatusType.Factory.fromString(content, namespaceUri);
                } else {
                    return StatusType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static StatusType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                StatusType object = null;

                // initialize a hash map to keep values
                java.util.Map attributeMap = new java.util.HashMap();
                java.util.List extraAttributeList = new java.util.ArrayList<org.apache.axiom.om.OMAttribute>();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                    "nil");

                            if ("true".equals(nillableValue) ||
                                    "1".equals(nillableValue)) {
                                throw new org.apache.axis2.databinding.ADBException(
                                    "The element: " + "StatusType" +
                                    "  cannot be null");
                            }

                            java.lang.String content = reader.getElementText();

                            if (content.indexOf(":") > 0) {
                                // this seems to be a Qname so find the namespace and send
                                prefix = content.substring(0,
                                        content.indexOf(":"));
                                namespaceuri = reader.getNamespaceURI(prefix);
                                object = StatusType.Factory.fromString(content,
                                        namespaceuri);
                            } else {
                                // this seems to be not a qname send and empty namespace incase of it is
                                // check is done in fromString method
                                object = StatusType.Factory.fromString(content,
                                        "");
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class StructureType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = StructureType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Structure");

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":StructureType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "StructureType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static StructureType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                StructureType object = new StructureType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"StructureType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (StructureType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerResponse", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for More
         * This was an Attribute!
         */
        protected boolean localMore;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMore() {
            return localMore;
        }

        /**
         * Auto generated setter method
         * @param param More
         */
        public void setMore(boolean param) {
            this.localMore = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (true) {
                writeAttribute("", "more",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMore), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerResponse object = new RetrieveIncidentManagementForCustomerResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "more"
                    java.lang.String tempAttribMore = reader.getAttributeValue(null,
                            "more");

                    if (tempAttribMore != null) {
                        java.lang.String content = tempAttribMore;

                        object.setMore(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMore));
                    } else {
                    }

                    handledAttributes.add("more");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class IncidentManagementForCustomerModelType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = IncidentManagementForCustomerModelType
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for Keys
         */
        protected IncidentManagementForCustomerKeysType localKeys;

        /**
         * field for Instance
         */
        protected IncidentManagementForCustomerInstanceType localInstance;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerKeysType
         */
        public IncidentManagementForCustomerKeysType getKeys() {
            return localKeys;
        }

        /**
         * Auto generated setter method
         * @param param Keys
         */
        public void setKeys(IncidentManagementForCustomerKeysType param) {
            this.localKeys = param;
        }

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerInstanceType
         */
        public IncidentManagementForCustomerInstanceType getInstance() {
            return localInstance;
        }

        /**
         * Auto generated setter method
         * @param param Instance
         */
        public void setInstance(
            IncidentManagementForCustomerInstanceType param) {
            this.localInstance = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":IncidentManagementForCustomerModelType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "IncidentManagementForCustomerModelType", xmlWriter);
                }
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localKeys == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "keys cannot be null!!");
            }

            localKeys.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "keys"), xmlWriter);

            if (localInstance == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "instance cannot be null!!");
            }

            localInstance.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "instance"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IncidentManagementForCustomerModelType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                IncidentManagementForCustomerModelType object = new IncidentManagementForCustomerModelType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"IncidentManagementForCustomerModelType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (IncidentManagementForCustomerModelType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "keys").equals(
                                reader.getName())) {
                        object.setKeys(IncidentManagementForCustomerKeysType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "instance").equals(
                                reader.getName())) {
                        object.setInstance(IncidentManagementForCustomerInstanceType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ResolveIncidentManagementForCustomerRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "ResolveIncidentManagementForCustomerRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updateconstraint
         * This was an Attribute!
         */
        protected long localUpdateconstraint = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                "-1");

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdateconstraint() {
            return localUpdateconstraint;
        }

        /**
         * Auto generated setter method
         * @param param Updateconstraint
         */
        public void setUpdateconstraint(long param) {
            this.localUpdateconstraint = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":ResolveIncidentManagementForCustomerRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ResolveIncidentManagementForCustomerRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (localUpdateconstraint != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updateconstraint",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdateconstraint), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ResolveIncidentManagementForCustomerRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ResolveIncidentManagementForCustomerRequest object = new ResolveIncidentManagementForCustomerRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ResolveIncidentManagementForCustomerRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ResolveIncidentManagementForCustomerRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updateconstraint"
                    java.lang.String tempAttribUpdateconstraint = reader.getAttributeValue(null,
                            "updateconstraint");

                    if (tempAttribUpdateconstraint != null) {
                        java.lang.String content = tempAttribUpdateconstraint;

                        object.setUpdateconstraint(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdateconstraint));
                    } else {
                        object.setUpdateconstraint(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updateconstraint");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ResolveIncidentManagementForCustomerResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "ResolveIncidentManagementForCustomerResponse", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":ResolveIncidentManagementForCustomerResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ResolveIncidentManagementForCustomerResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ResolveIncidentManagementForCustomerResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ResolveIncidentManagementForCustomerResponse object = new ResolveIncidentManagementForCustomerResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ResolveIncidentManagementForCustomerResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ResolveIncidentManagementForCustomerResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CreateIncidentManagementForCustomerResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "CreateIncidentManagementForCustomerResponse", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":CreateIncidentManagementForCustomerResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CreateIncidentManagementForCustomerResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CreateIncidentManagementForCustomerResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CreateIncidentManagementForCustomerResponse object = new CreateIncidentManagementForCustomerResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CreateIncidentManagementForCustomerResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CreateIncidentManagementForCustomerResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class UpdateIncidentManagementForCustomerResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "UpdateIncidentManagementForCustomerResponse", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":UpdateIncidentManagementForCustomerResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "UpdateIncidentManagementForCustomerResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UpdateIncidentManagementForCustomerResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                UpdateIncidentManagementForCustomerResponse object = new UpdateIncidentManagementForCustomerResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"UpdateIncidentManagementForCustomerResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (UpdateIncidentManagementForCustomerResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttachmentsType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AttachmentsType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Attachment
         * This was an Array!
         */
        protected AttachmentType[] localAttachment;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachmentTracker = false;

        public boolean isAttachmentSpecified() {
            return localAttachmentTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachmentType[]
         */
        public AttachmentType[] getAttachment() {
            return localAttachment;
        }

        /**
         * validate the array for Attachment
         */
        protected void validateAttachment(AttachmentType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Attachment
         */
        public void setAttachment(AttachmentType[] param) {
            validateAttachment(param);

            localAttachmentTracker = param != null;

            this.localAttachment = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param AttachmentType
         */
        public void addAttachment(AttachmentType param) {
            if (localAttachment == null) {
                localAttachment = new AttachmentType[] {  };
            }

            //update the setting tracker
            localAttachmentTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localAttachment);
            list.add(param);
            this.localAttachment = (AttachmentType[]) list.toArray(new AttachmentType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AttachmentsType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AttachmentsType", xmlWriter);
                }
            }

            if (localAttachmentTracker) {
                if (localAttachment != null) {
                    for (int i = 0; i < localAttachment.length; i++) {
                        if (localAttachment[i] != null) {
                            localAttachment[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7/Common",
                                    "attachment"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "attachment cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttachmentsType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttachmentsType object = new AttachmentsType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AttachmentsType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AttachmentsType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7/Common",
                                "attachment").equals(reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(AttachmentType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7/Common",
                                            "attachment").equals(
                                            reader.getName())) {
                                    list1.add(AttachmentType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setAttachment((AttachmentType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                AttachmentType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class JournalUpdates_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = JournalUpdates_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for JournalUpdates
         * This was an Array!
         */
        protected StringType[] localJournalUpdates;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localJournalUpdatesTracker = false;

        public boolean isJournalUpdatesSpecified() {
            return localJournalUpdatesTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getJournalUpdates() {
            return localJournalUpdates;
        }

        /**
         * validate the array for JournalUpdates
         */
        protected void validateJournalUpdates(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param JournalUpdates
         */
        public void setJournalUpdates(StringType[] param) {
            validateJournalUpdates(param);

            localJournalUpdatesTracker = param != null;

            this.localJournalUpdates = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addJournalUpdates(StringType param) {
            if (localJournalUpdates == null) {
                localJournalUpdates = new StringType[] {  };
            }

            //update the setting tracker
            localJournalUpdatesTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localJournalUpdates);
            list.add(param);
            this.localJournalUpdates = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":JournalUpdates_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "JournalUpdates_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localJournalUpdatesTracker) {
                if (localJournalUpdates != null) {
                    for (int i = 0; i < localJournalUpdates.length; i++) {
                        if (localJournalUpdates[i] != null) {
                            localJournalUpdates[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7",
                                    "JournalUpdates"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "JournalUpdates cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static JournalUpdates_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                JournalUpdates_type0 object = new JournalUpdates_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"JournalUpdates_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (JournalUpdates_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "JournalUpdates").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "JournalUpdates").equals(
                                            reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setJournalUpdates((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class BooleanType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = BooleanType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _boolean
         */
        protected boolean local_boolean;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Boolean");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean get_boolean() {
            return local_boolean;
        }

        /**
         * Auto generated setter method
         * @param param _boolean
         */
        public void set_boolean(boolean param) {
            this.local_boolean = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_boolean);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":BooleanType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "BooleanType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (false) {
                throw new org.apache.axis2.databinding.ADBException(
                    "boolean cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_boolean));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static BooleanType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                BooleanType returnValue = new BooleanType();

                returnValue.set_boolean(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                        value));

                return returnValue;
            }

            public static BooleanType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return BooleanType.Factory.fromString(content, namespaceUri);
                } else {
                    return BooleanType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static BooleanType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                BooleanType object = new BooleanType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"BooleanType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (BooleanType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "boolean" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_boolean(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class MessagesType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = MessagesType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Message
         * This was an Array!
         */
        protected MessageType[] localMessage;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessageTracker = false;

        public boolean isMessageSpecified() {
            return localMessageTracker;
        }

        /**
         * Auto generated getter method
         * @return MessageType[]
         */
        public MessageType[] getMessage() {
            return localMessage;
        }

        /**
         * validate the array for Message
         */
        protected void validateMessage(MessageType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(MessageType[] param) {
            validateMessage(param);

            localMessageTracker = param != null;

            this.localMessage = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param MessageType
         */
        public void addMessage(MessageType param) {
            if (localMessage == null) {
                localMessage = new MessageType[] {  };
            }

            //update the setting tracker
            localMessageTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localMessage);
            list.add(param);
            this.localMessage = (MessageType[]) list.toArray(new MessageType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":MessagesType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "MessagesType", xmlWriter);
                }
            }

            if (localMessageTracker) {
                if (localMessage != null) {
                    for (int i = 0; i < localMessage.length; i++) {
                        if (localMessage[i] != null) {
                            localMessage[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7/Common",
                                    "message"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "message cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static MessagesType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                MessagesType object = new MessagesType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"MessagesType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (MessagesType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7/Common", "message").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(MessageType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7/Common",
                                            "message").equals(reader.getName())) {
                                    list1.add(MessageType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setMessage((MessageType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                MessageType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class IncidentManagementForCustomerKeysType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = IncidentManagementForCustomerKeysType
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for IncidentID
         */
        protected StringType localIncidentID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncidentIDTracker = false;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * field for Updatecounter
         * This was an Attribute!
         */
        protected long localUpdatecounter;

        public boolean isIncidentIDSpecified() {
            return localIncidentIDTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getIncidentID() {
            return localIncidentID;
        }

        /**
         * Auto generated setter method
         * @param param IncidentID
         */
        public void setIncidentID(StringType param) {
            localIncidentIDTracker = true;

            this.localIncidentID = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdatecounter() {
            return localUpdatecounter;
        }

        /**
         * Auto generated setter method
         * @param param Updatecounter
         */
        public void setUpdatecounter(long param) {
            this.localUpdatecounter = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":IncidentManagementForCustomerKeysType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "IncidentManagementForCustomerKeysType", xmlWriter);
                }
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localUpdatecounter != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updatecounter",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdatecounter), xmlWriter);
            }

            if (localIncidentIDTracker) {
                if (localIncidentID == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "IncidentID", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localIncidentID.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "IncidentID"),
                        xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IncidentManagementForCustomerKeysType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                IncidentManagementForCustomerKeysType object = new IncidentManagementForCustomerKeysType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"IncidentManagementForCustomerKeysType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (IncidentManagementForCustomerKeysType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    // handle attribute "updatecounter"
                    java.lang.String tempAttribUpdatecounter = reader.getAttributeValue(null,
                            "updatecounter");

                    if (tempAttribUpdatecounter != null) {
                        java.lang.String content = tempAttribUpdatecounter;

                        object.setUpdatecounter(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdatecounter));
                    } else {
                        object.setUpdatecounter(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updatecounter");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "IncidentID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setIncidentID(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setIncidentID(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Base64Binary implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = base64Binary
           Namespace URI = http://www.w3.org/2005/05/xmlmime
           Namespace Prefix = ns1
         */

        /**
         * field for Base64Binary
         */
        protected javax.activation.DataHandler localBase64Binary;

        /**
         * field for ContentType
         * This was an Attribute!
         */
        protected ContentType_type0 localContentType;

        /**
         * Auto generated getter method
         * @return javax.activation.DataHandler
         */
        public javax.activation.DataHandler getBase64Binary() {
            return localBase64Binary;
        }

        /**
         * Auto generated setter method
         * @param param Base64Binary
         */
        public void setBase64Binary(javax.activation.DataHandler param) {
            this.localBase64Binary = param;
        }

        public java.lang.String toString() {
            return localBase64Binary.toString();
        }

        /**
         * Auto generated getter method
         * @return ContentType_type0
         */
        public ContentType_type0 getContentType() {
            return localContentType;
        }

        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(ContentType_type0 param) {
            this.localContentType = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.w3.org/2005/05/xmlmime");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":base64Binary", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "base64Binary", xmlWriter);
                }
            }

            if (localContentType != null) {
                writeAttribute("", "contentType", localContentType.toString(),
                    xmlWriter);
            }

            if (localBase64Binary != null) {
                try {
                    org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter,
                        localBase64Binary, null, true);
                } catch (java.io.IOException ex) {
                    throw new javax.xml.stream.XMLStreamException("Unable to read data handler for base64Binary",
                        ex);
                }
            } else {
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.w3.org/2005/05/xmlmime")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static Base64Binary fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                Base64Binary returnValue = new Base64Binary();

                returnValue.setBase64Binary(org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(
                        value));

                return returnValue;
            }

            public static Base64Binary fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return Base64Binary.Factory.fromString(content, namespaceUri);
                } else {
                    return Base64Binary.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Base64Binary parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Base64Binary object = new Base64Binary();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"base64Binary".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Base64Binary) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "contentType"
                    java.lang.String tempAttribContentType = reader.getAttributeValue(null,
                            "contentType");

                    if (tempAttribContentType != null) {
                        java.lang.String content = tempAttribContentType;

                        object.setContentType(ContentType_type0.Factory.fromString(
                                reader, tempAttribContentType));
                    } else {
                    }

                    handledAttributes.add("contentType");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                object.setBase64Binary(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class HexBinary implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = hexBinary
           Namespace URI = http://www.w3.org/2005/05/xmlmime
           Namespace Prefix = ns1
         */

        /**
         * field for HexBinary
         */
        protected org.apache.axis2.databinding.types.HexBinary localHexBinary;

        /**
         * field for ContentType
         * This was an Attribute!
         */
        protected ContentType_type0 localContentType;

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.HexBinary
         */
        public org.apache.axis2.databinding.types.HexBinary getHexBinary() {
            return localHexBinary;
        }

        /**
         * Auto generated setter method
         * @param param HexBinary
         */
        public void setHexBinary(
            org.apache.axis2.databinding.types.HexBinary param) {
            this.localHexBinary = param;
        }

        public java.lang.String toString() {
            return localHexBinary.toString();
        }

        /**
         * Auto generated getter method
         * @return ContentType_type0
         */
        public ContentType_type0 getContentType() {
            return localContentType;
        }

        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(ContentType_type0 param) {
            this.localContentType = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.w3.org/2005/05/xmlmime");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":hexBinary", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "hexBinary", xmlWriter);
                }
            }

            if (localContentType != null) {
                writeAttribute("", "contentType", localContentType.toString(),
                    xmlWriter);
            }

            if (localHexBinary == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "hexBinary cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHexBinary));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.w3.org/2005/05/xmlmime")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static HexBinary fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                HexBinary returnValue = new HexBinary();

                returnValue.setHexBinary(org.apache.axis2.databinding.utils.ConverterUtil.convertToHexBinary(
                        value));

                return returnValue;
            }

            public static HexBinary fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return HexBinary.Factory.fromString(content, namespaceUri);
                } else {
                    return HexBinary.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static HexBinary parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                HexBinary object = new HexBinary();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"hexBinary".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (HexBinary) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "contentType"
                    java.lang.String tempAttribContentType = reader.getAttributeValue(null,
                            "contentType");

                    if (tempAttribContentType != null) {
                        java.lang.String content = tempAttribContentType;

                        object.setContentType(ContentType_type0.Factory.fromString(
                                reader, tempAttribContentType));
                    } else {
                    }

                    handledAttributes.add("contentType");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "hexBinary" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setHexBinary(org.apache.axis2.databinding.utils.ConverterUtil.convertToHexBinary(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ReviewDetail_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ReviewDetail_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for ReviewDetail
         * This was an Array!
         */
        protected StringType[] localReviewDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReviewDetailTracker = false;

        public boolean isReviewDetailSpecified() {
            return localReviewDetailTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getReviewDetail() {
            return localReviewDetail;
        }

        /**
         * validate the array for ReviewDetail
         */
        protected void validateReviewDetail(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param ReviewDetail
         */
        public void setReviewDetail(StringType[] param) {
            validateReviewDetail(param);

            localReviewDetailTracker = param != null;

            this.localReviewDetail = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addReviewDetail(StringType param) {
            if (localReviewDetail == null) {
                localReviewDetail = new StringType[] {  };
            }

            //update the setting tracker
            localReviewDetailTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localReviewDetail);
            list.add(param);
            this.localReviewDetail = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":ReviewDetail_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "ReviewDetail_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localReviewDetailTracker) {
                if (localReviewDetail != null) {
                    for (int i = 0; i < localReviewDetail.length; i++) {
                        if (localReviewDetail[i] != null) {
                            localReviewDetail[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7", "ReviewDetail"),
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReviewDetail cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ReviewDetail_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ReviewDetail_type0 object = new ReviewDetail_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ReviewDetail_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ReviewDetail_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ReviewDetail").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "ReviewDetail").equals(
                                            reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setReviewDetail((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class AttachmentType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = AttachmentType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Base64Binary
         */
        protected javax.activation.DataHandler localBase64Binary;

        /**
         * field for ContentType
         * This was an Attribute!
         */
        protected ContentType_type0 localContentType;

        /**
         * field for Href
         * This was an Attribute!
         */
        protected java.lang.String localHref;

        /**
         * field for ContentId
         * This was an Attribute!
         */
        protected java.lang.String localContentId;

        /**
         * field for Action
         * This was an Attribute!
         */
        protected java.lang.String localAction;

        /**
         * field for Name
         * This was an Attribute!
         */
        protected java.lang.String localName;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType;

        /**
         * field for Len
         * This was an Attribute!
         */
        protected int localLen;

        /**
         * field for Charset
         * This was an Attribute!
         */
        protected java.lang.String localCharset;

        /**
         * field for UploadBy
         * This was an Attribute!
         */
        protected java.lang.String localUploadBy;

        /**
         * field for UploadDate
         * This was an Attribute!
         */
        protected java.lang.String localUploadDate;

        /**
         * field for AttachmentType
         * This was an Attribute!
         */
        protected java.lang.String localAttachmentType;

        /**
         * Auto generated getter method
         * @return javax.activation.DataHandler
         */
        public javax.activation.DataHandler getBase64Binary() {
            return localBase64Binary;
        }

        /**
         * Auto generated setter method
         * @param param Base64Binary
         */
        public void setBase64Binary(javax.activation.DataHandler param) {
            this.localBase64Binary = param;
        }

        public java.lang.String toString() {
            return localBase64Binary.toString();
        }

        /**
         * Auto generated getter method
         * @return ContentType_type0
         */
        public ContentType_type0 getContentType() {
            return localContentType;
        }

        /**
         * Auto generated setter method
         * @param param ContentType
         */
        public void setContentType(ContentType_type0 param) {
            this.localContentType = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHref() {
            return localHref;
        }

        /**
         * Auto generated setter method
         * @param param Href
         */
        public void setHref(java.lang.String param) {
            this.localHref = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContentId() {
            return localContentId;
        }

        /**
         * Auto generated setter method
         * @param param ContentId
         */
        public void setContentId(java.lang.String param) {
            this.localContentId = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAction() {
            return localAction;
        }

        /**
         * Auto generated setter method
         * @param param Action
         */
        public void setAction(java.lang.String param) {
            this.localAction = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getName() {
            return localName;
        }

        /**
         * Auto generated setter method
         * @param param Name
         */
        public void setName(java.lang.String param) {
            this.localName = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
            this.localType = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getLen() {
            return localLen;
        }

        /**
         * Auto generated setter method
         * @param param Len
         */
        public void setLen(int param) {
            this.localLen = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getCharset() {
            return localCharset;
        }

        /**
         * Auto generated setter method
         * @param param Charset
         */
        public void setCharset(java.lang.String param) {
            this.localCharset = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUploadBy() {
            return localUploadBy;
        }

        /**
         * Auto generated setter method
         * @param param UploadBy
         */
        public void setUploadBy(java.lang.String param) {
            this.localUploadBy = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUploadDate() {
            return localUploadDate;
        }

        /**
         * Auto generated setter method
         * @param param UploadDate
         */
        public void setUploadDate(java.lang.String param) {
            this.localUploadDate = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getAttachmentType() {
            return localAttachmentType;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentType
         */
        public void setAttachmentType(java.lang.String param) {
            this.localAttachmentType = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":AttachmentType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "AttachmentType", xmlWriter);
                }
            }

            if (localContentType != null) {
                writeAttribute("", "contentType", localContentType.toString(),
                    xmlWriter);
            }

            if (localHref != null) {
                writeAttribute("", "href",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHref), xmlWriter);
            }

            if (localContentId != null) {
                writeAttribute("", "contentId",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localContentId), xmlWriter);
            }

            if (localAction != null) {
                writeAttribute("", "action",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAction), xmlWriter);
            }

            if (localName != null) {
                writeAttribute("", "name",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localName), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localName is null");
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localLen != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "len",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localLen), xmlWriter);
            }

            if (localCharset != null) {
                writeAttribute("", "charset",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCharset), xmlWriter);
            }

            if (localUploadBy != null) {
                writeAttribute("", "upload.by",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUploadBy), xmlWriter);
            }

            if (localUploadDate != null) {
                writeAttribute("", "upload.date",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUploadDate), xmlWriter);
            }

            if (localAttachmentType != null) {
                writeAttribute("", "attachmentType",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentType), xmlWriter);
            }

            if (localBase64Binary != null) {
                try {
                    org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter,
                        localBase64Binary, null, true);
                } catch (java.io.IOException ex) {
                    throw new javax.xml.stream.XMLStreamException("Unable to read data handler for base64Binary",
                        ex);
                }
            } else {
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static AttachmentType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                AttachmentType returnValue = new AttachmentType();

                returnValue.setBase64Binary(org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(
                        value));

                return returnValue;
            }

            public static AttachmentType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return AttachmentType.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return AttachmentType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static AttachmentType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                AttachmentType object = new AttachmentType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"AttachmentType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (AttachmentType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "contentType"
                    java.lang.String tempAttribContentType = reader.getAttributeValue(null,
                            "contentType");

                    if (tempAttribContentType != null) {
                        java.lang.String content = tempAttribContentType;

                        object.setContentType(ContentType_type0.Factory.fromString(
                                reader, tempAttribContentType));
                    } else {
                    }

                    handledAttributes.add("contentType");

                    // handle attribute "href"
                    java.lang.String tempAttribHref = reader.getAttributeValue(null,
                            "href");

                    if (tempAttribHref != null) {
                        java.lang.String content = tempAttribHref;

                        object.setHref(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHref));
                    } else {
                    }

                    handledAttributes.add("href");

                    // handle attribute "contentId"
                    java.lang.String tempAttribContentId = reader.getAttributeValue(null,
                            "contentId");

                    if (tempAttribContentId != null) {
                        java.lang.String content = tempAttribContentId;

                        object.setContentId(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribContentId));
                    } else {
                    }

                    handledAttributes.add("contentId");

                    // handle attribute "action"
                    java.lang.String tempAttribAction = reader.getAttributeValue(null,
                            "action");

                    if (tempAttribAction != null) {
                        java.lang.String content = tempAttribAction;

                        object.setAction(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribAction));
                    } else {
                    }

                    handledAttributes.add("action");

                    // handle attribute "name"
                    java.lang.String tempAttribName = reader.getAttributeValue(null,
                            "name");

                    if (tempAttribName != null) {
                        java.lang.String content = tempAttribName;

                        object.setName(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribName));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute name is missing");
                    }

                    handledAttributes.add("name");

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "len"
                    java.lang.String tempAttribLen = reader.getAttributeValue(null,
                            "len");

                    if (tempAttribLen != null) {
                        java.lang.String content = tempAttribLen;

                        object.setLen(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribLen));
                    } else {
                        object.setLen(java.lang.Integer.MIN_VALUE);
                    }

                    handledAttributes.add("len");

                    // handle attribute "charset"
                    java.lang.String tempAttribCharset = reader.getAttributeValue(null,
                            "charset");

                    if (tempAttribCharset != null) {
                        java.lang.String content = tempAttribCharset;

                        object.setCharset(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribCharset));
                    } else {
                    }

                    handledAttributes.add("charset");

                    // handle attribute "upload.by"
                    java.lang.String tempAttribUploadBy = reader.getAttributeValue(null,
                            "upload.by");

                    if (tempAttribUploadBy != null) {
                        java.lang.String content = tempAttribUploadBy;

                        object.setUploadBy(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribUploadBy));
                    } else {
                    }

                    handledAttributes.add("upload.by");

                    // handle attribute "upload.date"
                    java.lang.String tempAttribUploadDate = reader.getAttributeValue(null,
                            "upload.date");

                    if (tempAttribUploadDate != null) {
                        java.lang.String content = tempAttribUploadDate;

                        object.setUploadDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribUploadDate));
                    } else {
                    }

                    handledAttributes.add("upload.date");

                    // handle attribute "attachmentType"
                    java.lang.String tempAttribAttachmentType = reader.getAttributeValue(null,
                            "attachmentType");

                    if (tempAttribAttachmentType != null) {
                        java.lang.String content = tempAttribAttachmentType;

                        object.setAttachmentType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribAttachmentType));
                    } else {
                    }

                    handledAttributes.add("attachmentType");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                object.setBase64Binary(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ContentType_type0 implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://www.w3.org/2005/05/xmlmime",
                "contentType_type0", "ns1");

        /**
         * field for ContentType_type0
         */
        protected java.lang.String localContentType_type0;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getContentType_type0() {
            return localContentType_type0;
        }

        /**
         * Auto generated setter method
         * @param param ContentType_type0
         */
        public void setContentType_type0(java.lang.String param) {
            if ((3 <= java.lang.String.valueOf(param).length())) {
                this.localContentType_type0 = param;
            } else {
                throw new java.lang.RuntimeException(
                    "Input values do not follow defined XSD restrictions");
            }
        }

        public java.lang.String toString() {
            return localContentType_type0.toString();
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            //We can safely assume an element has only one type associated with it
            java.lang.String namespace = parentQName.getNamespaceURI();
            java.lang.String _localName = parentQName.getLocalPart();

            writeStartElement(null, namespace, _localName, xmlWriter);

            // add the type details if this is used in a simple type
            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://www.w3.org/2005/05/xmlmime");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":contentType_type0", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "contentType_type0", xmlWriter);
                }
            }

            if (localContentType_type0 == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "contentType_type0 cannot be null !!");
            } else {
                xmlWriter.writeCharacters(localContentType_type0);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://www.w3.org/2005/05/xmlmime")) {
                return "ns1";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static ContentType_type0 fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                ContentType_type0 returnValue = new ContentType_type0();

                returnValue.setContentType_type0(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static ContentType_type0 fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return ContentType_type0.Factory.fromString(content,
                        namespaceUri);
                } else {
                    return ContentType_type0.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ContentType_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ContentType_type0 object = new ContentType_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "contentType_type0" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setContentType_type0(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class DurationType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DurationType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Duration
         */
        protected org.apache.axis2.databinding.types.Duration localDuration;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Duration");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Duration
         */
        public org.apache.axis2.databinding.types.Duration getDuration() {
            return localDuration;
        }

        /**
         * Auto generated setter method
         * @param param Duration
         */
        public void setDuration(
            org.apache.axis2.databinding.types.Duration param) {
            this.localDuration = param;
        }

        public java.lang.String toString() {
            return localDuration.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DurationType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DurationType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localDuration == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "duration cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDuration));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DurationType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                DurationType returnValue = new DurationType();

                returnValue.setDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToDuration(
                        value));

                return returnValue;
            }

            public static DurationType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DurationType.Factory.fromString(content, namespaceUri);
                } else {
                    return DurationType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DurationType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DurationType object = new DurationType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DurationType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DurationType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "duration" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDuration(org.apache.axis2.databinding.utils.ConverterUtil.convertToDuration(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class CloseIncidentManagementForCustomerResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "CloseIncidentManagementForCustomerResponse", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":CloseIncidentManagementForCustomerResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "CloseIncidentManagementForCustomerResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static CloseIncidentManagementForCustomerResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                CloseIncidentManagementForCustomerResponse object = new CloseIncidentManagementForCustomerResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"CloseIncidentManagementForCustomerResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (CloseIncidentManagementForCustomerResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ShortType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ShortType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _short
         */
        protected short local_short;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Short");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return short
         */
        public short get_short() {
            return local_short;
        }

        /**
         * Auto generated setter method
         * @param param _short
         */
        public void set_short(short param) {
            this.local_short = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_short);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ShortType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ShortType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (local_short == java.lang.Short.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException(
                    "short cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_short));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static ShortType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                ShortType returnValue = new ShortType();

                returnValue.set_short(org.apache.axis2.databinding.utils.ConverterUtil.convertToShort(
                        value));

                return returnValue;
            }

            public static ShortType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return ShortType.Factory.fromString(content, namespaceUri);
                } else {
                    return ShortType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ShortType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ShortType object = new ShortType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ShortType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ShortType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "short" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_short(org.apache.axis2.databinding.utils.ConverterUtil.convertToShort(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class MessageType extends StringType implements org.apache.axis2.databinding.ADBBean {
        /**
         * field for Severity
         * This was an Attribute!
         */
        protected int localSeverity;

        /**
         * field for Module
         * This was an Attribute!
         */
        protected java.lang.String localModule;

        /* This type was generated from the piece of schema that had
           name = MessageType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for String
         */

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getString() {
            return localString;
        }

        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String param) {
            this.localString = param;
        }

        public java.lang.String toString() {
            return localString.toString();
        }

        /**
         * field for Type
         * This was an Attribute!
         */

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * field for Mandatory
         * This was an Attribute!
         */

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * field for Readonly
         * This was an Attribute!
         */

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSeverity() {
            return localSeverity;
        }

        /**
         * Auto generated setter method
         * @param param Severity
         */
        public void setSeverity(int param) {
            this.localSeverity = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getModule() {
            return localModule;
        }

        /**
         * Auto generated setter method
         * @param param Module
         */
        public void setModule(java.lang.String param) {
            this.localModule = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7/Common");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":MessageType", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "MessageType", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localSeverity != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "severity",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSeverity), xmlWriter);
            }

            if (localModule != null) {
                writeAttribute("", "module",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localModule), xmlWriter);
            }

            if (localString == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "string cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localString);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static MessageType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                MessageType returnValue = new MessageType();

                returnValue.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static MessageType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return MessageType.Factory.fromString(content, namespaceUri);
                } else {
                    return MessageType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static MessageType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                MessageType object = new MessageType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"MessageType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (MessageType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    // handle attribute "severity"
                    java.lang.String tempAttribSeverity = reader.getAttributeValue(null,
                            "severity");

                    if (tempAttribSeverity != null) {
                        java.lang.String content = tempAttribSeverity;

                        object.setSeverity(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSeverity));
                    } else {
                        object.setSeverity(java.lang.Integer.MIN_VALUE);
                    }

                    handledAttributes.add("severity");

                    // handle attribute "module"
                    java.lang.String tempAttribModule = reader.getAttributeValue(null,
                            "module");

                    if (tempAttribModule != null) {
                        java.lang.String content = tempAttribModule;

                        object.setModule(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribModule));
                    } else {
                    }

                    handledAttributes.add("module");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "string" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ExtensionMapper {
        public static java.lang.Object getTypeObject(
            java.lang.String namespaceURI, java.lang.String typeName,
            javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {
            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "Solution_type0".equals(typeName)) {
                return Solution_type0.Factory.parse(reader);
            }

            if ("http://www.w3.org/2005/05/xmlmime".equals(namespaceURI) &&
                    "hexBinary".equals(typeName)) {
                return HexBinary.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "DecimalType".equals(typeName)) {
                return DecimalType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "DateTimeType".equals(typeName)) {
                return DateTimeType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "DoubleType".equals(typeName)) {
                return DoubleType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "StatusType".equals(typeName)) {
                return StatusType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "StructureType".equals(typeName)) {
                return StructureType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "IncidentManagementForCustomerModelType".equals(typeName)) {
                return IncidentManagementForCustomerModelType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "AttachmentsType".equals(typeName)) {
                return AttachmentsType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "JournalUpdates_type0".equals(typeName)) {
                return JournalUpdates_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "BooleanType".equals(typeName)) {
                return BooleanType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "MessagesType".equals(typeName)) {
                return MessagesType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "IncidentManagementForCustomerKeysType".equals(typeName)) {
                return IncidentManagementForCustomerKeysType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "ReviewDetail_type0".equals(typeName)) {
                return ReviewDetail_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "AttachmentType".equals(typeName)) {
                return AttachmentType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "DurationType".equals(typeName)) {
                return DurationType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "ShortType".equals(typeName)) {
                return ShortType.Factory.parse(reader);
            }

            if ("http://www.w3.org/2005/05/xmlmime".equals(namespaceURI) &&
                    "base64Binary".equals(typeName)) {
                return Base64Binary.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "MessageType".equals(typeName)) {
                return MessageType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "explanation_type0".equals(typeName)) {
                return Explanation_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "DateType".equals(typeName)) {
                return DateType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "ArrayType".equals(typeName)) {
                return ArrayType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "ByteType".equals(typeName)) {
                return ByteType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "TimeType".equals(typeName)) {
                return TimeType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "IntType".equals(typeName)) {
                return IntType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "FloatType".equals(typeName)) {
                return FloatType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "IncidentManagementForCustomerInstanceType".equals(
                        typeName)) {
                return IncidentManagementForCustomerInstanceType.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "Description_type0".equals(typeName)) {
                return Description_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "Base64Type".equals(typeName)) {
                return Base64Type.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "LongType".equals(typeName)) {
                return LongType.Factory.parse(reader);
            }

            if ("http://www.w3.org/2005/05/xmlmime".equals(namespaceURI) &&
                    "contentType_type0".equals(typeName)) {
                return ContentType_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7".equals(namespaceURI) &&
                    "EscalationTeams_type0".equals(typeName)) {
                return EscalationTeams_type0.Factory.parse(reader);
            }

            if ("http://schemas.hp.com/SM/7/Common".equals(namespaceURI) &&
                    "StringType".equals(typeName)) {
                return StringType.Factory.parse(reader);
            }

            throw new org.apache.axis2.databinding.ADBException(
                "Unsupported type " + namespaceURI + " " + typeName);
        }
    }

    public static class DateType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = DateType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Date
         */
        protected java.util.Date localDate;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Date");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getDate() {
            return localDate;
        }

        /**
         * Auto generated setter method
         * @param param Date
         */
        public void setDate(java.util.Date param) {
            this.localDate = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localDate);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":DateType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "DateType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localDate == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "date cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localDate));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static DateType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                DateType returnValue = new DateType();

                returnValue.setDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                        value));

                return returnValue;
            }

            public static DateType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return DateType.Factory.fromString(content, namespaceUri);
                } else {
                    return DateType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static DateType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                DateType object = new DateType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"DateType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (DateType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "date" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerKeysListRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerKeysListRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updatecounter
         * This was an Attribute!
         */
        protected boolean localUpdatecounter;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getUpdatecounter() {
            return localUpdatecounter;
        }

        /**
         * Auto generated setter method
         * @param param Updatecounter
         */
        public void setUpdatecounter(boolean param) {
            this.localUpdatecounter = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerKeysListRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerKeysListRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (true) {
                writeAttribute("", "updatecounter",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdatecounter), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerKeysListRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerKeysListRequest object = new RetrieveIncidentManagementForCustomerKeysListRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerKeysListRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerKeysListRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updatecounter"
                    java.lang.String tempAttribUpdatecounter = reader.getAttributeValue(null,
                            "updatecounter");

                    if (tempAttribUpdatecounter != null) {
                        java.lang.String content = tempAttribUpdatecounter;

                        object.setUpdatecounter(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribUpdatecounter));
                    } else {
                    }

                    handledAttributes.add("updatecounter");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerListResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerListResponse", "ns3");

        /**
         * field for Instance
         * This was an Array!
         */
        protected IncidentManagementForCustomerInstanceType[] localInstance;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for More
         * This was an Attribute!
         */
        protected boolean localMore;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerInstanceType[]
         */
        public IncidentManagementForCustomerInstanceType[] getInstance() {
            return localInstance;
        }

        /**
         * validate the array for Instance
         */
        protected void validateInstance(
            IncidentManagementForCustomerInstanceType[] param) {
            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException(
                    "Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         * @param param Instance
         */
        public void setInstance(
            IncidentManagementForCustomerInstanceType[] param) {
            validateInstance(param);

            this.localInstance = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param IncidentManagementForCustomerInstanceType
         */
        public void addInstance(
            IncidentManagementForCustomerInstanceType param) {
            if (localInstance == null) {
                localInstance = new IncidentManagementForCustomerInstanceType[] {
                        
                    };
            }

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localInstance);
            list.add(param);
            this.localInstance = (IncidentManagementForCustomerInstanceType[]) list.toArray(new IncidentManagementForCustomerInstanceType[list.size()]);
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMore() {
            return localMore;
        }

        /**
         * Auto generated setter method
         * @param param More
         */
        public void setMore(boolean param) {
            this.localMore = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerListResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerListResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (true) {
                writeAttribute("", "more",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMore), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localInstance != null) {
                for (int i = 0; i < localInstance.length; i++) {
                    if (localInstance[i] != null) {
                        localInstance[i].serialize(new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "instance"),
                            xmlWriter);
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "instance cannot be null!!");
                    }
                }
            } else {
                throw new org.apache.axis2.databinding.ADBException(
                    "instance cannot be null!!");
            }

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerListResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerListResponse object = new RetrieveIncidentManagementForCustomerListResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerListResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerListResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "more"
                    java.lang.String tempAttribMore = reader.getAttributeValue(null,
                            "more");

                    if (tempAttribMore != null) {
                        java.lang.String content = tempAttribMore;

                        object.setMore(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMore));
                    } else {
                    }

                    handledAttributes.add("more");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "instance").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(IncidentManagementForCustomerInstanceType.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "instance").equals(reader.getName())) {
                                    list1.add(IncidentManagementForCustomerInstanceType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setInstance((IncidentManagementForCustomerInstanceType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                IncidentManagementForCustomerInstanceType.class,
                                list1));
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class UpdateIncidentManagementForCustomerRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "UpdateIncidentManagementForCustomerRequest", "ns3");

        /**
         * field for Model
         */
        protected IncidentManagementForCustomerModelType localModel;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updateconstraint
         * This was an Attribute!
         */
        protected long localUpdateconstraint = org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                "-1");

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerModelType
         */
        public IncidentManagementForCustomerModelType getModel() {
            return localModel;
        }

        /**
         * Auto generated setter method
         * @param param Model
         */
        public void setModel(IncidentManagementForCustomerModelType param) {
            this.localModel = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdateconstraint() {
            return localUpdateconstraint;
        }

        /**
         * Auto generated setter method
         * @param param Updateconstraint
         */
        public void setUpdateconstraint(long param) {
            this.localUpdateconstraint = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":UpdateIncidentManagementForCustomerRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "UpdateIncidentManagementForCustomerRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (localUpdateconstraint != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updateconstraint",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdateconstraint), xmlWriter);
            }

            if (localModel == null) {
                throw new org.apache.axis2.databinding.ADBException(
                    "model cannot be null!!");
            }

            localModel.serialize(new javax.xml.namespace.QName(
                    "http://schemas.hp.com/SM/7", "model"), xmlWriter);

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static UpdateIncidentManagementForCustomerRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                UpdateIncidentManagementForCustomerRequest object = new UpdateIncidentManagementForCustomerRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"UpdateIncidentManagementForCustomerRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (UpdateIncidentManagementForCustomerRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updateconstraint"
                    java.lang.String tempAttribUpdateconstraint = reader.getAttributeValue(null,
                            "updateconstraint");

                    if (tempAttribUpdateconstraint != null) {
                        java.lang.String content = tempAttribUpdateconstraint;

                        object.setUpdateconstraint(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdateconstraint));
                    } else {
                        object.setUpdateconstraint(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updateconstraint");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "model").equals(
                                reader.getName())) {
                        object.setModel(IncidentManagementForCustomerModelType.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ArrayType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Array");

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ArrayType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ArrayType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ArrayType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ArrayType object = new ArrayType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ArrayType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ArrayType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class ByteType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = ByteType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _byte
         */
        protected byte local_byte;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Byte");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return byte
         */
        public byte get_byte() {
            return local_byte;
        }

        /**
         * Auto generated setter method
         * @param param _byte
         */
        public void set_byte(byte param) {
            this.local_byte = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_byte);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":ByteType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "ByteType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (local_byte == java.lang.Byte.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException(
                    "byte cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_byte));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static ByteType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                ByteType returnValue = new ByteType();

                returnValue.set_byte(org.apache.axis2.databinding.utils.ConverterUtil.convertToByte(
                        value));

                return returnValue;
            }

            public static ByteType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return ByteType.Factory.fromString(content, namespaceUri);
                } else {
                    return ByteType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static ByteType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                ByteType object = new ByteType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"ByteType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (ByteType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "byte" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_byte(org.apache.axis2.databinding.utils.ConverterUtil.convertToByte(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class TimeType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = TimeType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Time
         */
        protected org.apache.axis2.databinding.types.Time localTime;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Time");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return org.apache.axis2.databinding.types.Time
         */
        public org.apache.axis2.databinding.types.Time getTime() {
            return localTime;
        }

        /**
         * Auto generated setter method
         * @param param Time
         */
        public void setTime(org.apache.axis2.databinding.types.Time param) {
            this.localTime = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(localTime);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":TimeType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "TimeType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localTime == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "time cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localTime));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static TimeType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                TimeType returnValue = new TimeType();

                returnValue.setTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToTime(
                        value));

                return returnValue;
            }

            public static TimeType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return TimeType.Factory.fromString(content, namespaceUri);
                } else {
                    return TimeType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static TimeType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                TimeType object = new TimeType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"TimeType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (TimeType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "time" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setTime(org.apache.axis2.databinding.utils.ConverterUtil.convertToTime(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class IntType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = IntType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _int
         */
        protected int local_int;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Int");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return int
         */
        public int get_int() {
            return local_int;
        }

        /**
         * Auto generated setter method
         * @param param _int
         */
        public void set_int(int param) {
            this.local_int = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_int);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":IntType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "IntType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (local_int == java.lang.Integer.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException(
                    "int cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_int));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static IntType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                IntType returnValue = new IntType();

                returnValue.set_int(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                        value));

                return returnValue;
            }

            public static IntType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return IntType.Factory.fromString(content, namespaceUri);
                } else {
                    return IntType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IntType parse(javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                IntType object = new IntType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"IntType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (IntType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "int" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_int(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class FloatType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = FloatType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _float
         */
        protected float local_float;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Float");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return float
         */
        public float get_float() {
            return local_float;
        }

        /**
         * Auto generated setter method
         * @param param _float
         */
        public void set_float(float param) {
            this.local_float = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_float);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":FloatType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "FloatType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (java.lang.Float.isNaN(local_float)) {
                throw new org.apache.axis2.databinding.ADBException(
                    "float cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_float));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static FloatType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                FloatType returnValue = new FloatType();

                returnValue.set_float(org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(
                        value));

                return returnValue;
            }

            public static FloatType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return FloatType.Factory.fromString(content, namespaceUri);
                } else {
                    return FloatType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static FloatType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                FloatType object = new FloatType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"FloatType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (FloatType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "float" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_float(org.apache.axis2.databinding.utils.ConverterUtil.convertToFloat(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class IncidentManagementForCustomerInstanceType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = IncidentManagementForCustomerInstanceType
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for IncidentID
         */
        protected StringType localIncidentID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncidentIDTracker = false;

        /**
         * field for Category
         */
        protected StringType localCategory;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCategoryTracker = false;

        /**
         * field for OpenTime
         */
        protected DateTimeType localOpenTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOpenTimeTracker = false;

        /**
         * field for OpenedBy
         */
        protected StringType localOpenedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localOpenedByTracker = false;

        /**
         * field for Urgency
         */
        protected StringType localUrgency;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUrgencyTracker = false;

        /**
         * field for UpdatedTime
         */
        protected DateTimeType localUpdatedTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUpdatedTimeTracker = false;

        /**
         * field for AssignmentGroup
         */
        protected StringType localAssignmentGroup;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAssignmentGroupTracker = false;

        /**
         * field for ClosedTime
         */
        protected DateTimeType localClosedTime;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localClosedTimeTracker = false;

        /**
         * field for ClosedBy
         */
        protected StringType localClosedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localClosedByTracker = false;

        /**
         * field for ClosureCode
         */
        protected StringType localClosureCode;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localClosureCodeTracker = false;

        /**
         * field for AffectedCI
         */
        protected StringType localAffectedCI;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAffectedCITracker = false;

        /**
         * field for Description
         */
        protected Description_type0 localDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionTracker = false;

        /**
         * field for Solution
         */
        protected Solution_type0 localSolution;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSolutionTracker = false;

        /**
         * field for Assignee
         */
        protected StringType localAssignee;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAssigneeTracker = false;

        /**
         * field for Contact
         */
        protected StringType localContact;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactTracker = false;

        /**
         * field for JournalUpdates
         */
        protected JournalUpdates_type0 localJournalUpdates;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localJournalUpdatesTracker = false;

        /**
         * field for AlertStatus
         */
        protected StringType localAlertStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAlertStatusTracker = false;

        /**
         * field for ContactLastName
         */
        protected StringType localContactLastName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactLastNameTracker = false;

        /**
         * field for ContactFirstName
         */
        protected StringType localContactFirstName;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localContactFirstNameTracker = false;

        /**
         * field for Company
         */
        protected StringType localCompany;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localCompanyTracker = false;

        /**
         * field for Title
         */
        protected StringType localTitle;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTitleTracker = false;

        /**
         * field for TicketOwner
         */
        protected StringType localTicketOwner;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localTicketOwnerTracker = false;

        /**
         * field for UpdatedBy
         */
        protected StringType localUpdatedBy;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUpdatedByTracker = false;

        /**
         * field for Status
         */
        protected StringType localStatus;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localStatusTracker = false;

        /**
         * field for Phase
         */
        protected StringType localPhase;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localPhaseTracker = false;

        /**
         * field for Area
         */
        protected StringType localArea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAreaTracker = false;

        /**
         * field for SLAAgreementID
         */
        protected DecimalType localSLAAgreementID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSLAAgreementIDTracker = false;

        /**
         * field for SiteCategory
         */
        protected StringType localSiteCategory;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSiteCategoryTracker = false;

        /**
         * field for Subarea
         */
        protected StringType localSubarea;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSubareaTracker = false;

        /**
         * field for ProblemType
         */
        protected StringType localProblemType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localProblemTypeTracker = false;

        /**
         * field for ResolutionFixType
         */
        protected StringType localResolutionFixType;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localResolutionFixTypeTracker = false;

        /**
         * field for Source
         */
        protected StringType localSource;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localSourceTracker = false;

        /**
         * field for UserPriority
         */
        protected StringType localUserPriority;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localUserPriorityTracker = false;

        /**
         * field for Location
         */
        protected StringType localLocation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localLocationTracker = false;

        /**
         * field for Explanation
         */
        protected Explanation_type0 localExplanation;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localExplanationTracker = false;

        /**
         * field for Impact
         */
        protected StringType localImpact;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localImpactTracker = false;

        /**
         * field for Folder
         */
        protected StringType localFolder;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localFolderTracker = false;

        /**
         * field for Service
         */
        protected StringType localService;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localServiceTracker = false;

        /**
         * field for IncidentManager
         */
        protected StringType localIncidentManager;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localIncidentManagerTracker = false;

        /**
         * field for MajorIncident
         */
        protected BooleanType localMajorIncident;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMajorIncidentTracker = false;

        /**
         * field for Escalated
         */
        protected BooleanType localEscalated;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEscalatedTracker = false;

        /**
         * field for EscalationTeams
         */
        protected EscalationTeams_type0 localEscalationTeams;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEscalationTeamsTracker = false;

        /**
         * field for ReviewDetail
         */
        protected ReviewDetail_type0 localReviewDetail;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localReviewDetailTracker = false;

        /**
         * field for NNMID
         */
        protected StringType localNNMID;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localNNMIDTracker = false;

        /**
         * field for Attachments
         */
        protected AttachmentsType localAttachments;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localAttachmentsTracker = false;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * field for Uniquequery
         * This was an Attribute!
         */
        protected java.lang.String localUniquequery;

        /**
         * field for Recordid
         * This was an Attribute!
         */
        protected java.lang.String localRecordid;

        /**
         * field for Updatecounter
         * This was an Attribute!
         */
        protected long localUpdatecounter;

        public boolean isIncidentIDSpecified() {
            return localIncidentIDTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getIncidentID() {
            return localIncidentID;
        }

        /**
         * Auto generated setter method
         * @param param IncidentID
         */
        public void setIncidentID(StringType param) {
            localIncidentIDTracker = true;

            this.localIncidentID = param;
        }

        public boolean isCategorySpecified() {
            return localCategoryTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getCategory() {
            return localCategory;
        }

        /**
         * Auto generated setter method
         * @param param Category
         */
        public void setCategory(StringType param) {
            localCategoryTracker = true;

            this.localCategory = param;
        }

        public boolean isOpenTimeSpecified() {
            return localOpenTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return DateTimeType
         */
        public DateTimeType getOpenTime() {
            return localOpenTime;
        }

        /**
         * Auto generated setter method
         * @param param OpenTime
         */
        public void setOpenTime(DateTimeType param) {
            localOpenTimeTracker = true;

            this.localOpenTime = param;
        }

        public boolean isOpenedBySpecified() {
            return localOpenedByTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getOpenedBy() {
            return localOpenedBy;
        }

        /**
         * Auto generated setter method
         * @param param OpenedBy
         */
        public void setOpenedBy(StringType param) {
            localOpenedByTracker = true;

            this.localOpenedBy = param;
        }

        public boolean isUrgencySpecified() {
            return localUrgencyTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getUrgency() {
            return localUrgency;
        }

        /**
         * Auto generated setter method
         * @param param Urgency
         */
        public void setUrgency(StringType param) {
            localUrgencyTracker = true;

            this.localUrgency = param;
        }

        public boolean isUpdatedTimeSpecified() {
            return localUpdatedTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return DateTimeType
         */
        public DateTimeType getUpdatedTime() {
            return localUpdatedTime;
        }

        /**
         * Auto generated setter method
         * @param param UpdatedTime
         */
        public void setUpdatedTime(DateTimeType param) {
            localUpdatedTimeTracker = true;

            this.localUpdatedTime = param;
        }

        public boolean isAssignmentGroupSpecified() {
            return localAssignmentGroupTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getAssignmentGroup() {
            return localAssignmentGroup;
        }

        /**
         * Auto generated setter method
         * @param param AssignmentGroup
         */
        public void setAssignmentGroup(StringType param) {
            localAssignmentGroupTracker = true;

            this.localAssignmentGroup = param;
        }

        public boolean isClosedTimeSpecified() {
            return localClosedTimeTracker;
        }

        /**
         * Auto generated getter method
         * @return DateTimeType
         */
        public DateTimeType getClosedTime() {
            return localClosedTime;
        }

        /**
         * Auto generated setter method
         * @param param ClosedTime
         */
        public void setClosedTime(DateTimeType param) {
            localClosedTimeTracker = true;

            this.localClosedTime = param;
        }

        public boolean isClosedBySpecified() {
            return localClosedByTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getClosedBy() {
            return localClosedBy;
        }

        /**
         * Auto generated setter method
         * @param param ClosedBy
         */
        public void setClosedBy(StringType param) {
            localClosedByTracker = true;

            this.localClosedBy = param;
        }

        public boolean isClosureCodeSpecified() {
            return localClosureCodeTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getClosureCode() {
            return localClosureCode;
        }

        /**
         * Auto generated setter method
         * @param param ClosureCode
         */
        public void setClosureCode(StringType param) {
            localClosureCodeTracker = true;

            this.localClosureCode = param;
        }

        public boolean isAffectedCISpecified() {
            return localAffectedCITracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getAffectedCI() {
            return localAffectedCI;
        }

        /**
         * Auto generated setter method
         * @param param AffectedCI
         */
        public void setAffectedCI(StringType param) {
            localAffectedCITracker = true;

            this.localAffectedCI = param;
        }

        public boolean isDescriptionSpecified() {
            return localDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return Description_type0
         */
        public Description_type0 getDescription() {
            return localDescription;
        }

        /**
         * Auto generated setter method
         * @param param Description
         */
        public void setDescription(Description_type0 param) {
            localDescriptionTracker = param != null;

            this.localDescription = param;
        }

        public boolean isSolutionSpecified() {
            return localSolutionTracker;
        }

        /**
         * Auto generated getter method
         * @return Solution_type0
         */
        public Solution_type0 getSolution() {
            return localSolution;
        }

        /**
         * Auto generated setter method
         * @param param Solution
         */
        public void setSolution(Solution_type0 param) {
            localSolutionTracker = param != null;

            this.localSolution = param;
        }

        public boolean isAssigneeSpecified() {
            return localAssigneeTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getAssignee() {
            return localAssignee;
        }

        /**
         * Auto generated setter method
         * @param param Assignee
         */
        public void setAssignee(StringType param) {
            localAssigneeTracker = true;

            this.localAssignee = param;
        }

        public boolean isContactSpecified() {
            return localContactTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getContact() {
            return localContact;
        }

        /**
         * Auto generated setter method
         * @param param Contact
         */
        public void setContact(StringType param) {
            localContactTracker = true;

            this.localContact = param;
        }

        public boolean isJournalUpdatesSpecified() {
            return localJournalUpdatesTracker;
        }

        /**
         * Auto generated getter method
         * @return JournalUpdates_type0
         */
        public JournalUpdates_type0 getJournalUpdates() {
            return localJournalUpdates;
        }

        /**
         * Auto generated setter method
         * @param param JournalUpdates
         */
        public void setJournalUpdates(JournalUpdates_type0 param) {
            localJournalUpdatesTracker = param != null;

            this.localJournalUpdates = param;
        }

        public boolean isAlertStatusSpecified() {
            return localAlertStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getAlertStatus() {
            return localAlertStatus;
        }

        /**
         * Auto generated setter method
         * @param param AlertStatus
         */
        public void setAlertStatus(StringType param) {
            localAlertStatusTracker = true;

            this.localAlertStatus = param;
        }

        public boolean isContactLastNameSpecified() {
            return localContactLastNameTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getContactLastName() {
            return localContactLastName;
        }

        /**
         * Auto generated setter method
         * @param param ContactLastName
         */
        public void setContactLastName(StringType param) {
            localContactLastNameTracker = true;

            this.localContactLastName = param;
        }

        public boolean isContactFirstNameSpecified() {
            return localContactFirstNameTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getContactFirstName() {
            return localContactFirstName;
        }

        /**
         * Auto generated setter method
         * @param param ContactFirstName
         */
        public void setContactFirstName(StringType param) {
            localContactFirstNameTracker = true;

            this.localContactFirstName = param;
        }

        public boolean isCompanySpecified() {
            return localCompanyTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getCompany() {
            return localCompany;
        }

        /**
         * Auto generated setter method
         * @param param Company
         */
        public void setCompany(StringType param) {
            localCompanyTracker = true;

            this.localCompany = param;
        }

        public boolean isTitleSpecified() {
            return localTitleTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getTitle() {
            return localTitle;
        }

        /**
         * Auto generated setter method
         * @param param Title
         */
        public void setTitle(StringType param) {
            localTitleTracker = true;

            this.localTitle = param;
        }

        public boolean isTicketOwnerSpecified() {
            return localTicketOwnerTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getTicketOwner() {
            return localTicketOwner;
        }

        /**
         * Auto generated setter method
         * @param param TicketOwner
         */
        public void setTicketOwner(StringType param) {
            localTicketOwnerTracker = true;

            this.localTicketOwner = param;
        }

        public boolean isUpdatedBySpecified() {
            return localUpdatedByTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getUpdatedBy() {
            return localUpdatedBy;
        }

        /**
         * Auto generated setter method
         * @param param UpdatedBy
         */
        public void setUpdatedBy(StringType param) {
            localUpdatedByTracker = true;

            this.localUpdatedBy = param;
        }

        public boolean isStatusSpecified() {
            return localStatusTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StringType param) {
            localStatusTracker = true;

            this.localStatus = param;
        }

        public boolean isPhaseSpecified() {
            return localPhaseTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getPhase() {
            return localPhase;
        }

        /**
         * Auto generated setter method
         * @param param Phase
         */
        public void setPhase(StringType param) {
            localPhaseTracker = true;

            this.localPhase = param;
        }

        public boolean isAreaSpecified() {
            return localAreaTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getArea() {
            return localArea;
        }

        /**
         * Auto generated setter method
         * @param param Area
         */
        public void setArea(StringType param) {
            localAreaTracker = true;

            this.localArea = param;
        }

        public boolean isSLAAgreementIDSpecified() {
            return localSLAAgreementIDTracker;
        }

        /**
         * Auto generated getter method
         * @return DecimalType
         */
        public DecimalType getSLAAgreementID() {
            return localSLAAgreementID;
        }

        /**
         * Auto generated setter method
         * @param param SLAAgreementID
         */
        public void setSLAAgreementID(DecimalType param) {
            localSLAAgreementIDTracker = true;

            this.localSLAAgreementID = param;
        }

        public boolean isSiteCategorySpecified() {
            return localSiteCategoryTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getSiteCategory() {
            return localSiteCategory;
        }

        /**
         * Auto generated setter method
         * @param param SiteCategory
         */
        public void setSiteCategory(StringType param) {
            localSiteCategoryTracker = true;

            this.localSiteCategory = param;
        }

        public boolean isSubareaSpecified() {
            return localSubareaTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getSubarea() {
            return localSubarea;
        }

        /**
         * Auto generated setter method
         * @param param Subarea
         */
        public void setSubarea(StringType param) {
            localSubareaTracker = true;

            this.localSubarea = param;
        }

        public boolean isProblemTypeSpecified() {
            return localProblemTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getProblemType() {
            return localProblemType;
        }

        /**
         * Auto generated setter method
         * @param param ProblemType
         */
        public void setProblemType(StringType param) {
            localProblemTypeTracker = true;

            this.localProblemType = param;
        }

        public boolean isResolutionFixTypeSpecified() {
            return localResolutionFixTypeTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getResolutionFixType() {
            return localResolutionFixType;
        }

        /**
         * Auto generated setter method
         * @param param ResolutionFixType
         */
        public void setResolutionFixType(StringType param) {
            localResolutionFixTypeTracker = true;

            this.localResolutionFixType = param;
        }

        public boolean isSourceSpecified() {
            return localSourceTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getSource() {
            return localSource;
        }

        /**
         * Auto generated setter method
         * @param param Source
         */
        public void setSource(StringType param) {
            localSourceTracker = true;

            this.localSource = param;
        }

        public boolean isUserPrioritySpecified() {
            return localUserPriorityTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getUserPriority() {
            return localUserPriority;
        }

        /**
         * Auto generated setter method
         * @param param UserPriority
         */
        public void setUserPriority(StringType param) {
            localUserPriorityTracker = true;

            this.localUserPriority = param;
        }

        public boolean isLocationSpecified() {
            return localLocationTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getLocation() {
            return localLocation;
        }

        /**
         * Auto generated setter method
         * @param param Location
         */
        public void setLocation(StringType param) {
            localLocationTracker = true;

            this.localLocation = param;
        }

        public boolean isExplanationSpecified() {
            return localExplanationTracker;
        }

        /**
         * Auto generated getter method
         * @return Explanation_type0
         */
        public Explanation_type0 getExplanation() {
            return localExplanation;
        }

        /**
         * Auto generated setter method
         * @param param Explanation
         */
        public void setExplanation(Explanation_type0 param) {
            localExplanationTracker = param != null;

            this.localExplanation = param;
        }

        public boolean isImpactSpecified() {
            return localImpactTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getImpact() {
            return localImpact;
        }

        /**
         * Auto generated setter method
         * @param param Impact
         */
        public void setImpact(StringType param) {
            localImpactTracker = true;

            this.localImpact = param;
        }

        public boolean isFolderSpecified() {
            return localFolderTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getFolder() {
            return localFolder;
        }

        /**
         * Auto generated setter method
         * @param param Folder
         */
        public void setFolder(StringType param) {
            localFolderTracker = true;

            this.localFolder = param;
        }

        public boolean isServiceSpecified() {
            return localServiceTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getService() {
            return localService;
        }

        /**
         * Auto generated setter method
         * @param param Service
         */
        public void setService(StringType param) {
            localServiceTracker = true;

            this.localService = param;
        }

        public boolean isIncidentManagerSpecified() {
            return localIncidentManagerTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getIncidentManager() {
            return localIncidentManager;
        }

        /**
         * Auto generated setter method
         * @param param IncidentManager
         */
        public void setIncidentManager(StringType param) {
            localIncidentManagerTracker = true;

            this.localIncidentManager = param;
        }

        public boolean isMajorIncidentSpecified() {
            return localMajorIncidentTracker;
        }

        /**
         * Auto generated getter method
         * @return BooleanType
         */
        public BooleanType getMajorIncident() {
            return localMajorIncident;
        }

        /**
         * Auto generated setter method
         * @param param MajorIncident
         */
        public void setMajorIncident(BooleanType param) {
            localMajorIncidentTracker = true;

            this.localMajorIncident = param;
        }

        public boolean isEscalatedSpecified() {
            return localEscalatedTracker;
        }

        /**
         * Auto generated getter method
         * @return BooleanType
         */
        public BooleanType getEscalated() {
            return localEscalated;
        }

        /**
         * Auto generated setter method
         * @param param Escalated
         */
        public void setEscalated(BooleanType param) {
            localEscalatedTracker = true;

            this.localEscalated = param;
        }

        public boolean isEscalationTeamsSpecified() {
            return localEscalationTeamsTracker;
        }

        /**
         * Auto generated getter method
         * @return EscalationTeams_type0
         */
        public EscalationTeams_type0 getEscalationTeams() {
            return localEscalationTeams;
        }

        /**
         * Auto generated setter method
         * @param param EscalationTeams
         */
        public void setEscalationTeams(EscalationTeams_type0 param) {
            localEscalationTeamsTracker = param != null;

            this.localEscalationTeams = param;
        }

        public boolean isReviewDetailSpecified() {
            return localReviewDetailTracker;
        }

        /**
         * Auto generated getter method
         * @return ReviewDetail_type0
         */
        public ReviewDetail_type0 getReviewDetail() {
            return localReviewDetail;
        }

        /**
         * Auto generated setter method
         * @param param ReviewDetail
         */
        public void setReviewDetail(ReviewDetail_type0 param) {
            localReviewDetailTracker = param != null;

            this.localReviewDetail = param;
        }

        public boolean isNNMIDSpecified() {
            return localNNMIDTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType
         */
        public StringType getNNMID() {
            return localNNMID;
        }

        /**
         * Auto generated setter method
         * @param param NNMID
         */
        public void setNNMID(StringType param) {
            localNNMIDTracker = true;

            this.localNNMID = param;
        }

        public boolean isAttachmentsSpecified() {
            return localAttachmentsTracker;
        }

        /**
         * Auto generated getter method
         * @return AttachmentsType
         */
        public AttachmentsType getAttachments() {
            return localAttachments;
        }

        /**
         * Auto generated setter method
         * @param param Attachments
         */
        public void setAttachments(AttachmentsType param) {
            localAttachmentsTracker = true;

            this.localAttachments = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getUniquequery() {
            return localUniquequery;
        }

        /**
         * Auto generated setter method
         * @param param Uniquequery
         */
        public void setUniquequery(java.lang.String param) {
            this.localUniquequery = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getRecordid() {
            return localRecordid;
        }

        /**
         * Auto generated setter method
         * @param param Recordid
         */
        public void setRecordid(java.lang.String param) {
            this.localRecordid = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getUpdatecounter() {
            return localUpdatecounter;
        }

        /**
         * Auto generated setter method
         * @param param Updatecounter
         */
        public void setUpdatecounter(long param) {
            this.localUpdatecounter = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":IncidentManagementForCustomerInstanceType",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "IncidentManagementForCustomerInstanceType", xmlWriter);
                }
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localUniquequery != null) {
                writeAttribute("", "uniquequery",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUniquequery), xmlWriter);
            }

            if (localRecordid != null) {
                writeAttribute("", "recordid",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localRecordid), xmlWriter);
            }

            if (localUpdatecounter != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "updatecounter",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdatecounter), xmlWriter);
            }

            if (localIncidentIDTracker) {
                if (localIncidentID == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "IncidentID", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localIncidentID.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "IncidentID"),
                        xmlWriter);
                }
            }

            if (localCategoryTracker) {
                if (localCategory == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Category", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localCategory.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Category"), xmlWriter);
                }
            }

            if (localOpenTimeTracker) {
                if (localOpenTime == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "OpenTime", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOpenTime.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "OpenTime"), xmlWriter);
                }
            }

            if (localOpenedByTracker) {
                if (localOpenedBy == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "OpenedBy", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localOpenedBy.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "OpenedBy"), xmlWriter);
                }
            }

            if (localUrgencyTracker) {
                if (localUrgency == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Urgency", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localUrgency.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Urgency"), xmlWriter);
                }
            }

            if (localUpdatedTimeTracker) {
                if (localUpdatedTime == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "UpdatedTime", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localUpdatedTime.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "UpdatedTime"),
                        xmlWriter);
                }
            }

            if (localAssignmentGroupTracker) {
                if (localAssignmentGroup == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "AssignmentGroup", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAssignmentGroup.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "AssignmentGroup"),
                        xmlWriter);
                }
            }

            if (localClosedTimeTracker) {
                if (localClosedTime == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ClosedTime", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClosedTime.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ClosedTime"),
                        xmlWriter);
                }
            }

            if (localClosedByTracker) {
                if (localClosedBy == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ClosedBy", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClosedBy.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ClosedBy"), xmlWriter);
                }
            }

            if (localClosureCodeTracker) {
                if (localClosureCode == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ClosureCode", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localClosureCode.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ClosureCode"),
                        xmlWriter);
                }
            }

            if (localAffectedCITracker) {
                if (localAffectedCI == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "AffectedCI", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAffectedCI.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "AffectedCI"),
                        xmlWriter);
                }
            }

            if (localDescriptionTracker) {
                if (localDescription == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Description cannot be null!!");
                }

                localDescription.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "Description"), xmlWriter);
            }

            if (localSolutionTracker) {
                if (localSolution == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Solution cannot be null!!");
                }

                localSolution.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "Solution"), xmlWriter);
            }

            if (localAssigneeTracker) {
                if (localAssignee == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Assignee", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAssignee.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Assignee"), xmlWriter);
                }
            }

            if (localContactTracker) {
                if (localContact == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Contact", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localContact.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Contact"), xmlWriter);
                }
            }

            if (localJournalUpdatesTracker) {
                if (localJournalUpdates == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "JournalUpdates cannot be null!!");
                }

                localJournalUpdates.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "JournalUpdates"),
                    xmlWriter);
            }

            if (localAlertStatusTracker) {
                if (localAlertStatus == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "AlertStatus", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAlertStatus.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "AlertStatus"),
                        xmlWriter);
                }
            }

            if (localContactLastNameTracker) {
                if (localContactLastName == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ContactLastName", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localContactLastName.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ContactLastName"),
                        xmlWriter);
                }
            }

            if (localContactFirstNameTracker) {
                if (localContactFirstName == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ContactFirstName", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localContactFirstName.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ContactFirstName"),
                        xmlWriter);
                }
            }

            if (localCompanyTracker) {
                if (localCompany == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Company", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localCompany.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Company"), xmlWriter);
                }
            }

            if (localTitleTracker) {
                if (localTitle == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Title", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTitle.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Title"), xmlWriter);
                }
            }

            if (localTicketOwnerTracker) {
                if (localTicketOwner == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "TicketOwner", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localTicketOwner.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "TicketOwner"),
                        xmlWriter);
                }
            }

            if (localUpdatedByTracker) {
                if (localUpdatedBy == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "UpdatedBy", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localUpdatedBy.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "UpdatedBy"),
                        xmlWriter);
                }
            }

            if (localStatusTracker) {
                if (localStatus == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Status", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localStatus.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Status"), xmlWriter);
                }
            }

            if (localPhaseTracker) {
                if (localPhase == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Phase", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localPhase.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Phase"), xmlWriter);
                }
            }

            if (localAreaTracker) {
                if (localArea == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Area", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localArea.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Area"), xmlWriter);
                }
            }

            if (localSLAAgreementIDTracker) {
                if (localSLAAgreementID == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "SLAAgreementID", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localSLAAgreementID.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "SLAAgreementID"),
                        xmlWriter);
                }
            }

            if (localSiteCategoryTracker) {
                if (localSiteCategory == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "SiteCategory", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localSiteCategory.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "SiteCategory"),
                        xmlWriter);
                }
            }

            if (localSubareaTracker) {
                if (localSubarea == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Subarea", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localSubarea.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Subarea"), xmlWriter);
                }
            }

            if (localProblemTypeTracker) {
                if (localProblemType == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ProblemType", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localProblemType.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ProblemType"),
                        xmlWriter);
                }
            }

            if (localResolutionFixTypeTracker) {
                if (localResolutionFixType == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "ResolutionFixType", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localResolutionFixType.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "ResolutionFixType"),
                        xmlWriter);
                }
            }

            if (localSourceTracker) {
                if (localSource == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Source", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localSource.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Source"), xmlWriter);
                }
            }

            if (localUserPriorityTracker) {
                if (localUserPriority == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "UserPriority", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localUserPriority.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "UserPriority"),
                        xmlWriter);
                }
            }

            if (localLocationTracker) {
                if (localLocation == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Location", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localLocation.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Location"), xmlWriter);
                }
            }

            if (localExplanationTracker) {
                if (localExplanation == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "explanation cannot be null!!");
                }

                localExplanation.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "explanation"), xmlWriter);
            }

            if (localImpactTracker) {
                if (localImpact == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Impact", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localImpact.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Impact"), xmlWriter);
                }
            }

            if (localFolderTracker) {
                if (localFolder == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "folder", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localFolder.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "folder"), xmlWriter);
                }
            }

            if (localServiceTracker) {
                if (localService == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Service", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localService.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Service"), xmlWriter);
                }
            }

            if (localIncidentManagerTracker) {
                if (localIncidentManager == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "IncidentManager", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localIncidentManager.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "IncidentManager"),
                        xmlWriter);
                }
            }

            if (localMajorIncidentTracker) {
                if (localMajorIncident == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "MajorIncident", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localMajorIncident.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "MajorIncident"),
                        xmlWriter);
                }
            }

            if (localEscalatedTracker) {
                if (localEscalated == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "Escalated", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localEscalated.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "Escalated"),
                        xmlWriter);
                }
            }

            if (localEscalationTeamsTracker) {
                if (localEscalationTeams == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "EscalationTeams cannot be null!!");
                }

                localEscalationTeams.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "EscalationTeams"),
                    xmlWriter);
            }

            if (localReviewDetailTracker) {
                if (localReviewDetail == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "ReviewDetail cannot be null!!");
                }

                localReviewDetail.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "ReviewDetail"), xmlWriter);
            }

            if (localNNMIDTracker) {
                if (localNNMID == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "NNMID", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localNNMID.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "NNMID"), xmlWriter);
                }
            }

            if (localAttachmentsTracker) {
                if (localAttachments == null) {
                    writeStartElement(null, "http://schemas.hp.com/SM/7",
                        "attachments", xmlWriter);

                    // write the nil attribute
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "nil",
                        "1", xmlWriter);
                    xmlWriter.writeEndElement();
                } else {
                    localAttachments.serialize(new javax.xml.namespace.QName(
                            "http://schemas.hp.com/SM/7", "attachments"),
                        xmlWriter);
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static IncidentManagementForCustomerInstanceType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                IncidentManagementForCustomerInstanceType object = new IncidentManagementForCustomerInstanceType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"IncidentManagementForCustomerInstanceType".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (IncidentManagementForCustomerInstanceType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    // handle attribute "uniquequery"
                    java.lang.String tempAttribUniquequery = reader.getAttributeValue(null,
                            "uniquequery");

                    if (tempAttribUniquequery != null) {
                        java.lang.String content = tempAttribUniquequery;

                        object.setUniquequery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribUniquequery));
                    } else {
                    }

                    handledAttributes.add("uniquequery");

                    // handle attribute "recordid"
                    java.lang.String tempAttribRecordid = reader.getAttributeValue(null,
                            "recordid");

                    if (tempAttribRecordid != null) {
                        java.lang.String content = tempAttribRecordid;

                        object.setRecordid(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribRecordid));
                    } else {
                    }

                    handledAttributes.add("recordid");

                    // handle attribute "updatecounter"
                    java.lang.String tempAttribUpdatecounter = reader.getAttributeValue(null,
                            "updatecounter");

                    if (tempAttribUpdatecounter != null) {
                        java.lang.String content = tempAttribUpdatecounter;

                        object.setUpdatecounter(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribUpdatecounter));
                    } else {
                        object.setUpdatecounter(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("updatecounter");

                    reader.next();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "IncidentID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setIncidentID(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setIncidentID(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Category").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setCategory(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setCategory(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "OpenTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setOpenTime(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setOpenTime(DateTimeType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "OpenedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setOpenedBy(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setOpenedBy(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Urgency").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setUrgency(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setUrgency(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "UpdatedTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setUpdatedTime(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setUpdatedTime(DateTimeType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "AssignmentGroup").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAssignmentGroup(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAssignmentGroup(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ClosedTime").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClosedTime(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClosedTime(DateTimeType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ClosedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClosedBy(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClosedBy(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ClosureCode").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setClosureCode(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setClosureCode(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "AffectedCI").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAffectedCI(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAffectedCI(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Description").equals(
                                reader.getName())) {
                        object.setDescription(Description_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Solution").equals(
                                reader.getName())) {
                        object.setSolution(Solution_type0.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Assignee").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAssignee(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAssignee(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Contact").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setContact(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setContact(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "JournalUpdates").equals(
                                reader.getName())) {
                        object.setJournalUpdates(JournalUpdates_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "AlertStatus").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAlertStatus(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAlertStatus(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ContactLastName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setContactLastName(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setContactLastName(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ContactFirstName").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setContactFirstName(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setContactFirstName(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Company").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setCompany(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setCompany(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Title").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setTitle(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setTitle(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "TicketOwner").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setTicketOwner(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setTicketOwner(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "UpdatedBy").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setUpdatedBy(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setUpdatedBy(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Status").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setStatus(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setStatus(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Phase").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setPhase(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setPhase(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Area").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setArea(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setArea(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "SLAAgreementID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setSLAAgreementID(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setSLAAgreementID(DecimalType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "SiteCategory").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setSiteCategory(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setSiteCategory(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Subarea").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setSubarea(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setSubarea(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ProblemType").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setProblemType(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setProblemType(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7",
                                "ResolutionFixType").equals(reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setResolutionFixType(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setResolutionFixType(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Source").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setSource(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setSource(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "UserPriority").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setUserPriority(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setUserPriority(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Location").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setLocation(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setLocation(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "explanation").equals(
                                reader.getName())) {
                        object.setExplanation(Explanation_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Impact").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setImpact(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setImpact(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "folder").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setFolder(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setFolder(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Service").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setService(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setService(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "IncidentManager").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setIncidentManager(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setIncidentManager(StringType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "MajorIncident").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setMajorIncident(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setMajorIncident(BooleanType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Escalated").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setEscalated(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setEscalated(BooleanType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "EscalationTeams").equals(
                                reader.getName())) {
                        object.setEscalationTeams(EscalationTeams_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "ReviewDetail").equals(
                                reader.getName())) {
                        object.setReviewDetail(ReviewDetail_type0.Factory.parse(
                                reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "NNMID").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setNNMID(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setNNMID(StringType.Factory.parse(reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "attachments").equals(
                                reader.getName())) {
                        nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "nil");

                        if ("true".equals(nillableValue) ||
                                "1".equals(nillableValue)) {
                            object.setAttachments(null);
                            reader.next();

                            reader.next();
                        } else {
                            object.setAttachments(AttachmentsType.Factory.parse(
                                    reader));

                            reader.next();
                        }
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Description_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Description_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for Description
         * This was an Array!
         */
        protected StringType[] localDescription;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localDescriptionTracker = false;

        public boolean isDescriptionSpecified() {
            return localDescriptionTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getDescription() {
            return localDescription;
        }

        /**
         * validate the array for Description
         */
        protected void validateDescription(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param Description
         */
        public void setDescription(StringType[] param) {
            validateDescription(param);

            localDescriptionTracker = param != null;

            this.localDescription = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addDescription(StringType param) {
            if (localDescription == null) {
                localDescription = new StringType[] {  };
            }

            //update the setting tracker
            localDescriptionTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localDescription);
            list.add(param);
            this.localDescription = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":Description_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "Description_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localDescriptionTracker) {
                if (localDescription != null) {
                    for (int i = 0; i < localDescription.length; i++) {
                        if (localDescription[i] != null) {
                            localDescription[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7", "Description"),
                                xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "Description cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Description_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Description_type0 object = new Description_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Description_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Description_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "Description").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "Description").equals(
                                            reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setDescription((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class Base64Type implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = Base64Type
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for Base64Binary
         */
        protected javax.activation.DataHandler localBase64Binary;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Base64");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return javax.activation.DataHandler
         */
        public javax.activation.DataHandler getBase64Binary() {
            return localBase64Binary;
        }

        /**
         * Auto generated setter method
         * @param param Base64Binary
         */
        public void setBase64Binary(javax.activation.DataHandler param) {
            this.localBase64Binary = param;
        }

        public java.lang.String toString() {
            return localBase64Binary.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":Base64Type", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "Base64Type", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localBase64Binary != null) {
                try {
                    org.apache.axiom.util.stax.XMLStreamWriterUtils.writeDataHandler(xmlWriter,
                        localBase64Binary, null, true);
                } catch (java.io.IOException ex) {
                    throw new javax.xml.stream.XMLStreamException("Unable to read data handler for base64Binary",
                        ex);
                }
            } else {
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static Base64Type fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                Base64Type returnValue = new Base64Type();

                returnValue.setBase64Binary(org.apache.axis2.databinding.utils.ConverterUtil.convertToBase64Binary(
                        value));

                return returnValue;
            }

            public static Base64Type fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return Base64Type.Factory.fromString(content, namespaceUri);
                } else {
                    return Base64Type.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static Base64Type parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                Base64Type object = new Base64Type();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"Base64Type".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (Base64Type) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                object.setBase64Binary(org.apache.axiom.util.stax.XMLStreamReaderUtils.getDataHandlerFromElement(
                                        reader));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class LongType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = LongType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for _long
         */
        protected long local_long;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "Long");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return long
         */
        public long get_long() {
            return local_long;
        }

        /**
         * Auto generated setter method
         * @param param _long
         */
        public void set_long(long param) {
            this.local_long = param;
        }

        public java.lang.String toString() {
            return org.apache.axis2.databinding.utils.ConverterUtil.convertToString(local_long);
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":LongType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "LongType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (local_long == java.lang.Long.MIN_VALUE) {
                throw new org.apache.axis2.databinding.ADBException(
                    "long cannot be null!!");
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        local_long));
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static LongType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                LongType returnValue = new LongType();

                returnValue.set_long(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                        value));

                return returnValue;
            }

            public static LongType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return LongType.Factory.fromString(content, namespaceUri);
                } else {
                    return LongType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static LongType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                LongType object = new LongType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"LongType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (LongType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "long" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.set_long(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerKeysListResponse
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerKeysListResponse", "ns3");

        /**
         * field for Keys
         * This was an Array!
         */
        protected IncidentManagementForCustomerKeysType[] localKeys;

        /**
         * field for Messages
         */
        protected MessagesType localMessages;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localMessagesTracker = false;

        /**
         * field for Status
         * This was an Attribute!
         */
        protected StatusType localStatus;

        /**
         * field for Message
         * This was an Attribute!
         */
        protected java.lang.String localMessage;

        /**
         * field for SchemaRevisionDate
         * This was an Attribute!
         */
        protected java.util.Date localSchemaRevisionDate;

        /**
         * field for SchemaRevisionLevel
         * This was an Attribute!
         */
        protected int localSchemaRevisionLevel;

        /**
         * field for ReturnCode
         * This was an Attribute!
         */
        protected java.math.BigDecimal localReturnCode;

        /**
         * field for Query
         * This was an Attribute!
         */
        protected java.lang.String localQuery;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for More
         * This was an Attribute!
         */
        protected boolean localMore;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerKeysType[]
         */
        public IncidentManagementForCustomerKeysType[] getKeys() {
            return localKeys;
        }

        /**
         * validate the array for Keys
         */
        protected void validateKeys(
            IncidentManagementForCustomerKeysType[] param) {
            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException(
                    "Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         * @param param Keys
         */
        public void setKeys(IncidentManagementForCustomerKeysType[] param) {
            validateKeys(param);

            this.localKeys = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param IncidentManagementForCustomerKeysType
         */
        public void addKeys(IncidentManagementForCustomerKeysType param) {
            if (localKeys == null) {
                localKeys = new IncidentManagementForCustomerKeysType[] {  };
            }

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localKeys);
            list.add(param);
            this.localKeys = (IncidentManagementForCustomerKeysType[]) list.toArray(new IncidentManagementForCustomerKeysType[list.size()]);
        }

        public boolean isMessagesSpecified() {
            return localMessagesTracker;
        }

        /**
         * Auto generated getter method
         * @return MessagesType
         */
        public MessagesType getMessages() {
            return localMessages;
        }

        /**
         * Auto generated setter method
         * @param param Messages
         */
        public void setMessages(MessagesType param) {
            localMessagesTracker = param != null;

            this.localMessages = param;
        }

        /**
         * Auto generated getter method
         * @return StatusType
         */
        public StatusType getStatus() {
            return localStatus;
        }

        /**
         * Auto generated setter method
         * @param param Status
         */
        public void setStatus(StatusType param) {
            this.localStatus = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getMessage() {
            return localMessage;
        }

        /**
         * Auto generated setter method
         * @param param Message
         */
        public void setMessage(java.lang.String param) {
            this.localMessage = param;
        }

        /**
         * Auto generated getter method
         * @return java.util.Date
         */
        public java.util.Date getSchemaRevisionDate() {
            return localSchemaRevisionDate;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionDate
         */
        public void setSchemaRevisionDate(java.util.Date param) {
            this.localSchemaRevisionDate = param;
        }

        /**
         * Auto generated getter method
         * @return int
         */
        public int getSchemaRevisionLevel() {
            return localSchemaRevisionLevel;
        }

        /**
         * Auto generated setter method
         * @param param SchemaRevisionLevel
         */
        public void setSchemaRevisionLevel(int param) {
            this.localSchemaRevisionLevel = param;
        }

        /**
         * Auto generated getter method
         * @return java.math.BigDecimal
         */
        public java.math.BigDecimal getReturnCode() {
            return localReturnCode;
        }

        /**
         * Auto generated setter method
         * @param param ReturnCode
         */
        public void setReturnCode(java.math.BigDecimal param) {
            this.localReturnCode = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getQuery() {
            return localQuery;
        }

        /**
         * Auto generated setter method
         * @param param Query
         */
        public void setQuery(java.lang.String param) {
            this.localQuery = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMore() {
            return localMore;
        }

        /**
         * Auto generated setter method
         * @param param More
         */
        public void setMore(boolean param) {
            this.localMore = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerKeysListResponse",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerKeysListResponse",
                        xmlWriter);
                }
            }

            if (localStatus != null) {
                writeAttribute("", "status", localStatus.toString(), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localStatus is null");
            }

            if (localMessage != null) {
                writeAttribute("", "message",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMessage), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localMessage is null");
            }

            if (localSchemaRevisionDate != null) {
                writeAttribute("", "schemaRevisionDate",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionDate), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionDate is null");
            }

            if (localSchemaRevisionLevel != java.lang.Integer.MIN_VALUE) {
                writeAttribute("", "schemaRevisionLevel",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localSchemaRevisionLevel), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localSchemaRevisionLevel is null");
            }

            if (localReturnCode != null) {
                writeAttribute("", "returnCode",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReturnCode), xmlWriter);
            }

            if (localQuery != null) {
                writeAttribute("", "query",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localQuery), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (true) {
                writeAttribute("", "more",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMore), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localKeys != null) {
                for (int i = 0; i < localKeys.length; i++) {
                    if (localKeys[i] != null) {
                        localKeys[i].serialize(new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "keys"), xmlWriter);
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "keys cannot be null!!");
                    }
                }
            } else {
                throw new org.apache.axis2.databinding.ADBException(
                    "keys cannot be null!!");
            }

            if (localMessagesTracker) {
                if (localMessages == null) {
                    throw new org.apache.axis2.databinding.ADBException(
                        "messages cannot be null!!");
                }

                localMessages.serialize(new javax.xml.namespace.QName(
                        "http://schemas.hp.com/SM/7", "messages"), xmlWriter);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerKeysListResponse parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerKeysListResponse object = new RetrieveIncidentManagementForCustomerKeysListResponse();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerKeysListResponse".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerKeysListResponse) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "status"
                    java.lang.String tempAttribStatus = reader.getAttributeValue(null,
                            "status");

                    if (tempAttribStatus != null) {
                        java.lang.String content = tempAttribStatus;

                        object.setStatus(StatusType.Factory.fromString(reader,
                                tempAttribStatus));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute status is missing");
                    }

                    handledAttributes.add("status");

                    // handle attribute "message"
                    java.lang.String tempAttribMessage = reader.getAttributeValue(null,
                            "message");

                    if (tempAttribMessage != null) {
                        java.lang.String content = tempAttribMessage;

                        object.setMessage(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribMessage));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute message is missing");
                    }

                    handledAttributes.add("message");

                    // handle attribute "schemaRevisionDate"
                    java.lang.String tempAttribSchemaRevisionDate = reader.getAttributeValue(null,
                            "schemaRevisionDate");

                    if (tempAttribSchemaRevisionDate != null) {
                        java.lang.String content = tempAttribSchemaRevisionDate;

                        object.setSchemaRevisionDate(org.apache.axis2.databinding.utils.ConverterUtil.convertToDate(
                                tempAttribSchemaRevisionDate));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionDate is missing");
                    }

                    handledAttributes.add("schemaRevisionDate");

                    // handle attribute "schemaRevisionLevel"
                    java.lang.String tempAttribSchemaRevisionLevel = reader.getAttributeValue(null,
                            "schemaRevisionLevel");

                    if (tempAttribSchemaRevisionLevel != null) {
                        java.lang.String content = tempAttribSchemaRevisionLevel;

                        object.setSchemaRevisionLevel(org.apache.axis2.databinding.utils.ConverterUtil.convertToInt(
                                tempAttribSchemaRevisionLevel));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute schemaRevisionLevel is missing");
                    }

                    handledAttributes.add("schemaRevisionLevel");

                    // handle attribute "returnCode"
                    java.lang.String tempAttribReturnCode = reader.getAttributeValue(null,
                            "returnCode");

                    if (tempAttribReturnCode != null) {
                        java.lang.String content = tempAttribReturnCode;

                        object.setReturnCode(org.apache.axis2.databinding.utils.ConverterUtil.convertToDecimal(
                                tempAttribReturnCode));
                    } else {
                    }

                    handledAttributes.add("returnCode");

                    // handle attribute "query"
                    java.lang.String tempAttribQuery = reader.getAttributeValue(null,
                            "query");

                    if (tempAttribQuery != null) {
                        java.lang.String content = tempAttribQuery;

                        object.setQuery(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribQuery));
                    } else {
                    }

                    handledAttributes.add("query");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "more"
                    java.lang.String tempAttribMore = reader.getAttributeValue(null,
                            "more");

                    if (tempAttribMore != null) {
                        java.lang.String content = tempAttribMore;

                        object.setMore(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMore));
                    } else {
                    }

                    handledAttributes.add("more");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "keys").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(IncidentManagementForCustomerKeysType.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7", "keys").equals(
                                            reader.getName())) {
                                    list1.add(IncidentManagementForCustomerKeysType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setKeys((IncidentManagementForCustomerKeysType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                IncidentManagementForCustomerKeysType.class,
                                list1));
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "messages").equals(
                                reader.getName())) {
                        object.setMessages(MessagesType.Factory.parse(reader));

                        reader.next();
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class EscalationTeams_type0 extends ArrayType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = EscalationTeams_type0
           Namespace URI = http://schemas.hp.com/SM/7
           Namespace Prefix = ns3
         */

        /**
         * field for EscalationTeams
         * This was an Array!
         */
        protected StringType[] localEscalationTeams;

        /*  This tracker boolean wil be used to detect whether the user called the set method
         *   for this attribute. It will be used to determine whether to include this field
         *   in the serialized XML
         */
        protected boolean localEscalationTeamsTracker = false;

        public boolean isEscalationTeamsSpecified() {
            return localEscalationTeamsTracker;
        }

        /**
         * Auto generated getter method
         * @return StringType[]
         */
        public StringType[] getEscalationTeams() {
            return localEscalationTeams;
        }

        /**
         * validate the array for EscalationTeams
         */
        protected void validateEscalationTeams(StringType[] param) {
        }

        /**
         * Auto generated setter method
         * @param param EscalationTeams
         */
        public void setEscalationTeams(StringType[] param) {
            validateEscalationTeams(param);

            localEscalationTeamsTracker = param != null;

            this.localEscalationTeams = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param StringType
         */
        public void addEscalationTeams(StringType param) {
            if (localEscalationTeams == null) {
                localEscalationTeams = new StringType[] {  };
            }

            //update the setting tracker
            localEscalationTeamsTracker = true;

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localEscalationTeams);
            list.add(param);
            this.localEscalationTeams = (StringType[]) list.toArray(new StringType[list.size()]);
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                    "http://schemas.hp.com/SM/7");

            if ((namespacePrefix != null) &&
                    (namespacePrefix.trim().length() > 0)) {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    namespacePrefix + ":EscalationTeams_type0", xmlWriter);
            } else {
                writeAttribute("xsi",
                    "http://www.w3.org/2001/XMLSchema-instance", "type",
                    "EscalationTeams_type0", xmlWriter);
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (localEscalationTeamsTracker) {
                if (localEscalationTeams != null) {
                    for (int i = 0; i < localEscalationTeams.length; i++) {
                        if (localEscalationTeams[i] != null) {
                            localEscalationTeams[i].serialize(new javax.xml.namespace.QName(
                                    "http://schemas.hp.com/SM/7",
                                    "EscalationTeams"), xmlWriter);
                        } else {
                            // we don't have to do any thing since minOccures is zero
                        }
                    }
                } else {
                    throw new org.apache.axis2.databinding.ADBException(
                        "EscalationTeams cannot be null!!");
                }
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static EscalationTeams_type0 parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                EscalationTeams_type0 object = new EscalationTeams_type0();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"EscalationTeams_type0".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (EscalationTeams_type0) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "EscalationTeams").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(StringType.Factory.parse(reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7",
                                            "EscalationTeams").equals(
                                            reader.getName())) {
                                    list1.add(StringType.Factory.parse(reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setEscalationTeams((StringType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                StringType.class, list1));
                    } // End of if for expected property start element

                    else {
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class RetrieveIncidentManagementForCustomerListRequest
        implements org.apache.axis2.databinding.ADBBean {
        public static final javax.xml.namespace.QName MY_QNAME = new javax.xml.namespace.QName("http://schemas.hp.com/SM/7",
                "RetrieveIncidentManagementForCustomerListRequest", "ns3");

        /**
         * field for Keys
         * This was an Array!
         */
        protected IncidentManagementForCustomerKeysType[] localKeys;

        /**
         * field for AttachmentInfo
         * This was an Attribute!
         */
        protected boolean localAttachmentInfo;

        /**
         * field for AttachmentData
         * This was an Attribute!
         */
        protected boolean localAttachmentData;

        /**
         * field for IgnoreEmptyElements
         * This was an Attribute!
         */
        protected boolean localIgnoreEmptyElements = org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                "true");

        /**
         * field for Updatecounter
         * This was an Attribute!
         */
        protected boolean localUpdatecounter;

        /**
         * field for Handle
         * This was an Attribute!
         */
        protected java.lang.String localHandle;

        /**
         * field for Count
         * This was an Attribute!
         */
        protected long localCount;

        /**
         * field for Start
         * This was an Attribute!
         */
        protected long localStart;

        /**
         * field for AttachmentType
         * This was an Attribute!
         */
        protected long localAttachmentType;

        /**
         * Auto generated getter method
         * @return IncidentManagementForCustomerKeysType[]
         */
        public IncidentManagementForCustomerKeysType[] getKeys() {
            return localKeys;
        }

        /**
         * validate the array for Keys
         */
        protected void validateKeys(
            IncidentManagementForCustomerKeysType[] param) {
            if ((param != null) && (param.length < 1)) {
                throw new java.lang.RuntimeException(
                    "Input values do not follow defined XSD restrictions");
            }
        }

        /**
         * Auto generated setter method
         * @param param Keys
         */
        public void setKeys(IncidentManagementForCustomerKeysType[] param) {
            validateKeys(param);

            this.localKeys = param;
        }

        /**
         * Auto generated add method for the array for convenience
         * @param param IncidentManagementForCustomerKeysType
         */
        public void addKeys(IncidentManagementForCustomerKeysType param) {
            if (localKeys == null) {
                localKeys = new IncidentManagementForCustomerKeysType[] {  };
            }

            java.util.List list = org.apache.axis2.databinding.utils.ConverterUtil.toList(localKeys);
            list.add(param);
            this.localKeys = (IncidentManagementForCustomerKeysType[]) list.toArray(new IncidentManagementForCustomerKeysType[list.size()]);
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentInfo() {
            return localAttachmentInfo;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentInfo
         */
        public void setAttachmentInfo(boolean param) {
            this.localAttachmentInfo = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getAttachmentData() {
            return localAttachmentData;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentData
         */
        public void setAttachmentData(boolean param) {
            this.localAttachmentData = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getIgnoreEmptyElements() {
            return localIgnoreEmptyElements;
        }

        /**
         * Auto generated setter method
         * @param param IgnoreEmptyElements
         */
        public void setIgnoreEmptyElements(boolean param) {
            this.localIgnoreEmptyElements = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getUpdatecounter() {
            return localUpdatecounter;
        }

        /**
         * Auto generated setter method
         * @param param Updatecounter
         */
        public void setUpdatecounter(boolean param) {
            this.localUpdatecounter = param;
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getHandle() {
            return localHandle;
        }

        /**
         * Auto generated setter method
         * @param param Handle
         */
        public void setHandle(java.lang.String param) {
            this.localHandle = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getCount() {
            return localCount;
        }

        /**
         * Auto generated setter method
         * @param param Count
         */
        public void setCount(long param) {
            this.localCount = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getStart() {
            return localStart;
        }

        /**
         * Auto generated setter method
         * @param param Start
         */
        public void setStart(long param) {
            this.localStart = param;
        }

        /**
         * Auto generated getter method
         * @return long
         */
        public long getAttachmentType() {
            return localAttachmentType;
        }

        /**
         * Auto generated setter method
         * @param param AttachmentType
         */
        public void setAttachmentType(long param) {
            this.localAttachmentType = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, MY_QNAME));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix +
                        ":RetrieveIncidentManagementForCustomerListRequest",
                        xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "RetrieveIncidentManagementForCustomerListRequest",
                        xmlWriter);
                }
            }

            if (true) {
                writeAttribute("", "attachmentInfo",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentInfo), xmlWriter);
            }

            if (true) {
                writeAttribute("", "attachmentData",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentData), xmlWriter);
            }

            if (true) {
                writeAttribute("", "ignoreEmptyElements",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localIgnoreEmptyElements), xmlWriter);
            }

            if (true) {
                writeAttribute("", "updatecounter",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localUpdatecounter), xmlWriter);
            }

            if (localHandle != null) {
                writeAttribute("", "handle",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localHandle), xmlWriter);
            }

            if (localCount != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "count",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localCount), xmlWriter);
            }

            if (localStart != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "start",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localStart), xmlWriter);
            }

            if (localAttachmentType != java.lang.Long.MIN_VALUE) {
                writeAttribute("", "attachmentType",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localAttachmentType), xmlWriter);
            }

            if (localKeys != null) {
                for (int i = 0; i < localKeys.length; i++) {
                    if (localKeys[i] != null) {
                        localKeys[i].serialize(new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "keys"), xmlWriter);
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "keys cannot be null!!");
                    }
                }
            } else {
                throw new org.apache.axis2.databinding.ADBException(
                    "keys cannot be null!!");
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7")) {
                return "ns3";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static RetrieveIncidentManagementForCustomerListRequest parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                RetrieveIncidentManagementForCustomerListRequest object = new RetrieveIncidentManagementForCustomerListRequest();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"RetrieveIncidentManagementForCustomerListRequest".equals(
                                        type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (RetrieveIncidentManagementForCustomerListRequest) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "attachmentInfo"
                    java.lang.String tempAttribAttachmentInfo = reader.getAttributeValue(null,
                            "attachmentInfo");

                    if (tempAttribAttachmentInfo != null) {
                        java.lang.String content = tempAttribAttachmentInfo;

                        object.setAttachmentInfo(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentInfo));
                    } else {
                    }

                    handledAttributes.add("attachmentInfo");

                    // handle attribute "attachmentData"
                    java.lang.String tempAttribAttachmentData = reader.getAttributeValue(null,
                            "attachmentData");

                    if (tempAttribAttachmentData != null) {
                        java.lang.String content = tempAttribAttachmentData;

                        object.setAttachmentData(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribAttachmentData));
                    } else {
                    }

                    handledAttributes.add("attachmentData");

                    // handle attribute "ignoreEmptyElements"
                    java.lang.String tempAttribIgnoreEmptyElements = reader.getAttributeValue(null,
                            "ignoreEmptyElements");

                    if (tempAttribIgnoreEmptyElements != null) {
                        java.lang.String content = tempAttribIgnoreEmptyElements;

                        object.setIgnoreEmptyElements(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribIgnoreEmptyElements));
                    } else {
                    }

                    handledAttributes.add("ignoreEmptyElements");

                    // handle attribute "updatecounter"
                    java.lang.String tempAttribUpdatecounter = reader.getAttributeValue(null,
                            "updatecounter");

                    if (tempAttribUpdatecounter != null) {
                        java.lang.String content = tempAttribUpdatecounter;

                        object.setUpdatecounter(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribUpdatecounter));
                    } else {
                    }

                    handledAttributes.add("updatecounter");

                    // handle attribute "handle"
                    java.lang.String tempAttribHandle = reader.getAttributeValue(null,
                            "handle");

                    if (tempAttribHandle != null) {
                        java.lang.String content = tempAttribHandle;

                        object.setHandle(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribHandle));
                    } else {
                    }

                    handledAttributes.add("handle");

                    // handle attribute "count"
                    java.lang.String tempAttribCount = reader.getAttributeValue(null,
                            "count");

                    if (tempAttribCount != null) {
                        java.lang.String content = tempAttribCount;

                        object.setCount(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribCount));
                    } else {
                        object.setCount(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("count");

                    // handle attribute "start"
                    java.lang.String tempAttribStart = reader.getAttributeValue(null,
                            "start");

                    if (tempAttribStart != null) {
                        java.lang.String content = tempAttribStart;

                        object.setStart(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribStart));
                    } else {
                        object.setStart(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("start");

                    // handle attribute "attachmentType"
                    java.lang.String tempAttribAttachmentType = reader.getAttributeValue(null,
                            "attachmentType");

                    if (tempAttribAttachmentType != null) {
                        java.lang.String content = tempAttribAttachmentType;

                        object.setAttachmentType(org.apache.axis2.databinding.utils.ConverterUtil.convertToLong(
                                tempAttribAttachmentType));
                    } else {
                        object.setAttachmentType(java.lang.Long.MIN_VALUE);
                    }

                    handledAttributes.add("attachmentType");

                    reader.next();

                    java.util.ArrayList list1 = new java.util.ArrayList();

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement() &&
                            new javax.xml.namespace.QName(
                                "http://schemas.hp.com/SM/7", "keys").equals(
                                reader.getName())) {
                        // Process the array and step past its final element's end.
                        list1.add(IncidentManagementForCustomerKeysType.Factory.parse(
                                reader));

                        //loop until we find a start element that is not part of this array
                        boolean loopDone1 = false;

                        while (!loopDone1) {
                            // We should be at the end element, but make sure
                            while (!reader.isEndElement())
                                reader.next();

                            // Step out of this element
                            reader.next();

                            // Step to next element event.
                            while (!reader.isStartElement() &&
                                    !reader.isEndElement())
                                reader.next();

                            if (reader.isEndElement()) {
                                //two continuous end elements means we are exiting the xml structure
                                loopDone1 = true;
                            } else {
                                if (new javax.xml.namespace.QName(
                                            "http://schemas.hp.com/SM/7", "keys").equals(
                                            reader.getName())) {
                                    list1.add(IncidentManagementForCustomerKeysType.Factory.parse(
                                            reader));
                                } else {
                                    loopDone1 = true;
                                }
                            }
                        }

                        // call the converter utility  to convert and set the array
                        object.setKeys((IncidentManagementForCustomerKeysType[]) org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(
                                IncidentManagementForCustomerKeysType.class,
                                list1));
                    } // End of if for expected property start element

                    else {
                        // 1 - A start element we are not expecting indicates an invalid parameter was passed
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }

                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    if (reader.isStartElement()) {
                        // 2 - A start element we are not expecting indicates a trailing invalid property
                        throw new org.apache.axis2.databinding.ADBException(
                            "Unexpected subelement " + reader.getName());
                    }
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }

    public static class StringType implements org.apache.axis2.databinding.ADBBean {
        /* This type was generated from the piece of schema that had
           name = StringType
           Namespace URI = http://schemas.hp.com/SM/7/Common
           Namespace Prefix = ns2
         */

        /**
         * field for String
         */
        protected java.lang.String localString;

        /**
         * field for Type
         * This was an Attribute!
         */
        protected java.lang.String localType = org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                "String");

        /**
         * field for Mandatory
         * This was an Attribute!
         */
        protected boolean localMandatory;

        /**
         * field for Readonly
         * This was an Attribute!
         */
        protected boolean localReadonly;

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getString() {
            return localString;
        }

        /**
         * Auto generated setter method
         * @param param String
         */
        public void setString(java.lang.String param) {
            this.localString = param;
        }

        public java.lang.String toString() {
            return localString.toString();
        }

        /**
         * Auto generated getter method
         * @return java.lang.String
         */
        public java.lang.String getType() {
            return localType;
        }

        /**
         * Auto generated setter method
         * @param param Type
         */
        public void setType(java.lang.String param) {
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getMandatory() {
            return localMandatory;
        }

        /**
         * Auto generated setter method
         * @param param Mandatory
         */
        public void setMandatory(boolean param) {
            this.localMandatory = param;
        }

        /**
         * Auto generated getter method
         * @return boolean
         */
        public boolean getReadonly() {
            return localReadonly;
        }

        /**
         * Auto generated setter method
         * @param param Readonly
         */
        public void setReadonly(boolean param) {
            this.localReadonly = param;
        }

        /**
         *
         * @param parentQName
         * @param factory
         * @return org.apache.axiom.om.OMElement
         */
        public org.apache.axiom.om.OMElement getOMElement(
            final javax.xml.namespace.QName parentQName,
            final org.apache.axiom.om.OMFactory factory)
            throws org.apache.axis2.databinding.ADBException {
            return factory.createOMElement(new org.apache.axis2.databinding.ADBDataSource(
                    this, parentQName));
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            serialize(parentQName, xmlWriter, false);
        }

        public void serialize(final javax.xml.namespace.QName parentQName,
            javax.xml.stream.XMLStreamWriter xmlWriter, boolean serializeType)
            throws javax.xml.stream.XMLStreamException,
                org.apache.axis2.databinding.ADBException {
            java.lang.String prefix = null;
            java.lang.String namespace = null;

            prefix = parentQName.getPrefix();
            namespace = parentQName.getNamespaceURI();
            writeStartElement(prefix, namespace, parentQName.getLocalPart(),
                xmlWriter);

            if (serializeType) {
                java.lang.String namespacePrefix = registerPrefix(xmlWriter,
                        "http://schemas.hp.com/SM/7/Common");

                if ((namespacePrefix != null) &&
                        (namespacePrefix.trim().length() > 0)) {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        namespacePrefix + ":StringType", xmlWriter);
                } else {
                    writeAttribute("xsi",
                        "http://www.w3.org/2001/XMLSchema-instance", "type",
                        "StringType", xmlWriter);
                }
            }

            if (localType != null) {
                writeAttribute("", "type",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localType), xmlWriter);
            }
            else {
                throw new org.apache.axis2.databinding.ADBException(
                    "required attribute localType is null");
            }

            if (true) {
                writeAttribute("", "mandatory",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localMandatory), xmlWriter);
            }

            if (true) {
                writeAttribute("", "readonly",
                    org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        localReadonly), xmlWriter);
            }

            if (localString == null) {
                // write the nil attribute
                throw new org.apache.axis2.databinding.ADBException(
                    "string cannot be null!!");
            } else {
                xmlWriter.writeCharacters(localString);
            }

            xmlWriter.writeEndElement();
        }

        private static java.lang.String generatePrefix(
            java.lang.String namespace) {
            if (namespace.equals("http://schemas.hp.com/SM/7/Common")) {
                return "ns2";
            }

            return org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
        }

        /**
         * Utility method to write an element start tag.
         */
        private void writeStartElement(java.lang.String prefix,
            java.lang.String namespace, java.lang.String localPart,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeStartElement(writerPrefix, localPart, namespace);
            } else {
                if (namespace.length() == 0) {
                    prefix = "";
                } else if (prefix == null) {
                    prefix = generatePrefix(namespace);
                }

                xmlWriter.writeStartElement(prefix, localPart, namespace);
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }
        }

        /**
         * Util method to write an attribute with the ns prefix
         */
        private void writeAttribute(java.lang.String prefix,
            java.lang.String namespace, java.lang.String attName,
            java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);

            if (writerPrefix != null) {
                xmlWriter.writeAttribute(writerPrefix, namespace, attName,
                    attValue);
            } else {
                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
                xmlWriter.writeAttribute(prefix, namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeAttribute(java.lang.String namespace,
            java.lang.String attName, java.lang.String attValue,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attValue);
            } else {
                xmlWriter.writeAttribute(registerPrefix(xmlWriter, namespace),
                    namespace, attName, attValue);
            }
        }

        /**
         * Util method to write an attribute without the ns prefix
         */
        private void writeQNameAttribute(java.lang.String namespace,
            java.lang.String attName, javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String attributeNamespace = qname.getNamespaceURI();
            java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);

            if (attributePrefix == null) {
                attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
            }

            java.lang.String attributeValue;

            if (attributePrefix.trim().length() > 0) {
                attributeValue = attributePrefix + ":" + qname.getLocalPart();
            } else {
                attributeValue = qname.getLocalPart();
            }

            if (namespace.equals("")) {
                xmlWriter.writeAttribute(attName, attributeValue);
            } else {
                registerPrefix(xmlWriter, namespace);
                xmlWriter.writeAttribute(attributePrefix, namespace, attName,
                    attributeValue);
            }
        }

        /**
         *  method to handle Qnames
         */
        private void writeQName(javax.xml.namespace.QName qname,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String namespaceURI = qname.getNamespaceURI();

            if (namespaceURI != null) {
                java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);

                if (prefix == null) {
                    prefix = generatePrefix(namespaceURI);
                    xmlWriter.writeNamespace(prefix, namespaceURI);
                    xmlWriter.setPrefix(prefix, namespaceURI);
                }

                if (prefix.trim().length() > 0) {
                    xmlWriter.writeCharacters(prefix + ":" +
                        org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                } else {
                    // i.e this is the default namespace
                    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                            qname));
                }
            } else {
                xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        qname));
            }
        }

        private void writeQNames(javax.xml.namespace.QName[] qnames,
            javax.xml.stream.XMLStreamWriter xmlWriter)
            throws javax.xml.stream.XMLStreamException {
            if (qnames != null) {
                // we have to store this data until last moment since it is not possible to write any
                // namespace data after writing the charactor data
                java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
                java.lang.String namespaceURI = null;
                java.lang.String prefix = null;

                for (int i = 0; i < qnames.length; i++) {
                    if (i > 0) {
                        stringToWrite.append(" ");
                    }

                    namespaceURI = qnames[i].getNamespaceURI();

                    if (namespaceURI != null) {
                        prefix = xmlWriter.getPrefix(namespaceURI);

                        if ((prefix == null) || (prefix.length() == 0)) {
                            prefix = generatePrefix(namespaceURI);
                            xmlWriter.writeNamespace(prefix, namespaceURI);
                            xmlWriter.setPrefix(prefix, namespaceURI);
                        }

                        if (prefix.trim().length() > 0) {
                            stringToWrite.append(prefix).append(":")
                                         .append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        } else {
                            stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                    qnames[i]));
                        }
                    } else {
                        stringToWrite.append(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                qnames[i]));
                    }
                }

                xmlWriter.writeCharacters(stringToWrite.toString());
            }
        }

        /**
         * Register a namespace prefix
         */
        private java.lang.String registerPrefix(
            javax.xml.stream.XMLStreamWriter xmlWriter,
            java.lang.String namespace)
            throws javax.xml.stream.XMLStreamException {
            java.lang.String prefix = xmlWriter.getPrefix(namespace);

            if (prefix == null) {
                prefix = generatePrefix(namespace);

                javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();

                while (true) {
                    java.lang.String uri = nsContext.getNamespaceURI(prefix);

                    if ((uri == null) || (uri.length() == 0)) {
                        break;
                    }

                    prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
                }

                xmlWriter.writeNamespace(prefix, namespace);
                xmlWriter.setPrefix(prefix, namespace);
            }

            return prefix;
        }

        /**
         *  Factory class that keeps the parse method
         */
        public static class Factory {
            private static org.apache.commons.logging.Log log = org.apache.commons.logging.LogFactory.getLog(Factory.class);

            public static StringType fromString(java.lang.String value,
                java.lang.String namespaceURI) {
                StringType returnValue = new StringType();

                returnValue.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                        value));

                return returnValue;
            }

            public static StringType fromString(
                javax.xml.stream.XMLStreamReader xmlStreamReader,
                java.lang.String content) {
                if (content.indexOf(":") > -1) {
                    java.lang.String prefix = content.substring(0,
                            content.indexOf(":"));
                    java.lang.String namespaceUri = xmlStreamReader.getNamespaceContext()
                                                                   .getNamespaceURI(prefix);

                    return StringType.Factory.fromString(content, namespaceUri);
                } else {
                    return StringType.Factory.fromString(content, "");
                }
            }

            /**
             * static method to create the object
             * Precondition:  If this object is an element, the current or next start element starts this object and any intervening reader events are ignorable
             *                If this object is not an element, it is a complex type and the reader is at the event just after the outer start element
             * Postcondition: If this object is an element, the reader is positioned at its end element
             *                If this object is a complex type, the reader is positioned at the end element of its outer element
             */
            public static StringType parse(
                javax.xml.stream.XMLStreamReader reader)
                throws java.lang.Exception {
                StringType object = new StringType();

                int event;
                javax.xml.namespace.QName currentQName = null;
                java.lang.String nillableValue = null;
                java.lang.String prefix = "";
                java.lang.String namespaceuri = "";

                try {
                    while (!reader.isStartElement() && !reader.isEndElement())
                        reader.next();

                    currentQName = reader.getName();

                    if (reader.getAttributeValue(
                                "http://www.w3.org/2001/XMLSchema-instance",
                                "type") != null) {
                        java.lang.String fullTypeName = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                "type");

                        if (fullTypeName != null) {
                            java.lang.String nsPrefix = null;

                            if (fullTypeName.indexOf(":") > -1) {
                                nsPrefix = fullTypeName.substring(0,
                                        fullTypeName.indexOf(":"));
                            }

                            nsPrefix = (nsPrefix == null) ? "" : nsPrefix;

                            java.lang.String type = fullTypeName.substring(fullTypeName.indexOf(
                                        ":") + 1);

                            if (!"StringType".equals(type)) {
                                //find namespace for the prefix
                                java.lang.String nsUri = reader.getNamespaceContext()
                                                               .getNamespaceURI(nsPrefix);

                                return (StringType) ExtensionMapper.getTypeObject(nsUri,
                                    type, reader);
                            }
                        }
                    }

                    // Note all attributes that were handled. Used to differ normal attributes
                    // from anyAttributes.
                    java.util.Vector handledAttributes = new java.util.Vector();

                    // handle attribute "type"
                    java.lang.String tempAttribType = reader.getAttributeValue(null,
                            "type");

                    if (tempAttribType != null) {
                        java.lang.String content = tempAttribType;

                        object.setType(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                tempAttribType));
                    } else {
                        throw new org.apache.axis2.databinding.ADBException(
                            "Required attribute type is missing");
                    }

                    handledAttributes.add("type");

                    // handle attribute "mandatory"
                    java.lang.String tempAttribMandatory = reader.getAttributeValue(null,
                            "mandatory");

                    if (tempAttribMandatory != null) {
                        java.lang.String content = tempAttribMandatory;

                        object.setMandatory(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribMandatory));
                    } else {
                    }

                    handledAttributes.add("mandatory");

                    // handle attribute "readonly"
                    java.lang.String tempAttribReadonly = reader.getAttributeValue(null,
                            "readonly");

                    if (tempAttribReadonly != null) {
                        java.lang.String content = tempAttribReadonly;

                        object.setReadonly(org.apache.axis2.databinding.utils.ConverterUtil.convertToBoolean(
                                tempAttribReadonly));
                    } else {
                    }

                    handledAttributes.add("readonly");

                    while (!reader.isEndElement()) {
                        if (reader.isStartElement() || reader.hasText()) {
                            if (reader.isStartElement() || reader.hasText()) {
                                nillableValue = reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance",
                                        "nil");

                                if ("true".equals(nillableValue) ||
                                        "1".equals(nillableValue)) {
                                    throw new org.apache.axis2.databinding.ADBException(
                                        "The element: " + "string" +
                                        "  cannot be null");
                                }

                                java.lang.String content = reader.getElementText();

                                object.setString(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(
                                        content));
                            } // End of if for expected property start element

                            else {
                                // 3 - A start element we are not expecting indicates an invalid parameter was passed
                                throw new org.apache.axis2.databinding.ADBException(
                                    "Unexpected subelement " +
                                    reader.getName());
                            }
                        } else {
                            reader.next();
                        }
                    } // end of while loop
                } catch (javax.xml.stream.XMLStreamException e) {
                    throw new java.lang.Exception(e);
                }

                return object;
            }
        } //end of factory class
    }
}
